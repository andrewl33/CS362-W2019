        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void *a, const void *b)
        -:    9:{
       30:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       30:   12:  if (*(int *)a < *(int *)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
        1:   17:struct gameState *newGame()
        -:   18:{
        1:   19:  struct gameState *g = malloc(sizeof(struct gameState));
        1:   20:  return g;
        -:   21:}
        -:   22:
        1:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
        1:   26:  int *k = malloc(10 * sizeof(int));
        1:   27:  k[0] = k1;
        1:   28:  k[1] = k2;
        1:   29:  k[2] = k3;
        1:   30:  k[3] = k4;
        1:   31:  k[4] = k5;
        1:   32:  k[5] = k6;
        1:   33:  k[6] = k7;
        1:   34:  k[7] = k8;
        1:   35:  k[8] = k9;
        1:   36:  k[9] = k10;
        1:   37:  return k;
        -:   38:}
        -:   39:
        1:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        1:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       11:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      110:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       21:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      214:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      197:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
        3:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
    #####:  118:          if (numPlayers == 2)
        -:  119:          {
    #####:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
        3:  129:          state->supplyCount[i] = 10;
        -:  130:        }
        3:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      194:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        3:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
        8:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        -:  151:    }
       16:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        3:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        3:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       28:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
        6:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       20:  223:    card = floor(Random() * state->deckCount[player]);
       20:  224:    newDeck[newDeckPos] = state->deck[player][card];
       20:  225:    newDeckPos++;
       67:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
       47:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       20:  230:    state->deckCount[player]--;
        -:  231:  }
       22:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       20:  234:    state->deck[player][i] = newDeck[i];
       20:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        2:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        1:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        1:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        4:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        4:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        5:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
        5:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
        5:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
        5:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
        5:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
        5:  672:    state->deckCount[player]--;
        5:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
        5:  676:  return 0;
        -:  677:}
        -:  678:
        4:  679:int getCost(int cardNumber)
        -:  680:{
        4:  681:  switch (cardNumber)
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
        2:  691:  case copper:
        2:  692:    return 0;
        1:  693:  case silver:
        1:  694:    return 3;
        1:  695:  case gold:
        1:  696:    return 6;
    #####:  697:  case adventurer:
    #####:  698:    return 6;
    #####:  699:  case council_room:
    #####:  700:    return 5;
    #####:  701:  case feast:
    #####:  702:    return 4;
    #####:  703:  case gardens:
    #####:  704:    return 4;
    #####:  705:  case mine:
    #####:  706:    return 5;
    #####:  707:  case remodel:
    #####:  708:    return 4;
    #####:  709:  case smithy:
    #####:  710:    return 4;
    #####:  711:  case village:
    #####:  712:    return 3;
    #####:  713:  case baron:
    #####:  714:    return 4;
    #####:  715:  case great_hall:
    #####:  716:    return 3;
    #####:  717:  case minion:
    #####:  718:    return 5;
    #####:  719:  case steward:
    #####:  720:    return 3;
    #####:  721:  case tribute:
    #####:  722:    return 5;
    #####:  723:  case ambassador:
    #####:  724:    return 3;
    #####:  725:  case cutpurse:
    #####:  726:    return 4;
    #####:  727:  case embargo:
    #####:  728:    return 2;
    #####:  729:  case outpost:
    #####:  730:    return 5;
    #####:  731:  case salvager:
    #####:  732:    return 4;
    #####:  733:  case sea_hag:
    #####:  734:    return 4;
    #####:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int smithyEffect(int handPos, struct gameState *state)
        -:  743:{
    #####:  744:  int currentPlayer = whoseTurn(state);
        -:  745:  int i;
        -:  746:
        -:  747:  //+3 Cards
    #####:  748:  for (i = 0; i < 3; i++)
        -:  749:  {
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:  }
        -:  752:
        -:  753:  //discard card from hand
    #####:  754:  discardCard(handPos--, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int adventurerEffect(struct gameState *state)
        -:  759:{
    #####:  760:  int drawntreasure = 0;
    #####:  761:  int currentPlayer = whoseTurn(state);
        -:  762:  int cardDrawn;
        -:  763:  int temphand[MAX_HAND];
    #####:  764:  int z = 0;
        -:  765:
    #####:  766:  while (drawntreasure < 2)
        -:  767:  {
    #####:  768:    if (state->deckCount[currentPlayer] < 1)
        -:  769:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  770:      shuffle(currentPlayer, state);
        -:  771:    }
    #####:  772:    drawCard(currentPlayer, state);
    #####:  773:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####:  774:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  775:      drawntreasure++;
        -:  776:    else
        -:  777:    {
    #####:  778:      temphand[z] = cardDrawn;
    #####:  779:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  780:      z++;
        -:  781:    }
        -:  782:  }
    #####:  783:  while (z - 1 >= 0)
        -:  784:  {
    #####:  785:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  786:    z = z - 1;
        -:  787:  }
    #####:  788:  return 0;
        -:  789:}
        -:  790:
    #####:  791:int villageEffect(int handPos, struct gameState *state)
        -:  792:{
    #####:  793:  int currentPlayer = whoseTurn(state);
        -:  794:
        -:  795:  //+1 Card
    #####:  796:  drawCard(currentPlayer, state);
        -:  797:
        -:  798:  //+2 Actions
    #####:  799:  state->numActions = state->numActions + 2;
        -:  800:
        -:  801:  //discard played card from hand
    #####:  802:  discardCard(handPos, currentPlayer, state, 0);
    #####:  803:  return 0;
        -:  804:}
        -:  805:
    #####:  806:int greathallEffect(int handPos, struct gameState *state)
        -:  807:{
    #####:  808:  int currentPlayer = whoseTurn(state);
        -:  809:  //printf("prev state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
        -:  810:  //+1 Card
    #####:  811:  drawCard(currentPlayer, state);
        -:  812:
        -:  813:  //+1 Actions
    #####:  814:  state->numActions++;
        -:  815:
        -:  816:  //discard card from hand
    #####:  817:  discardCard(handPos, currentPlayer, state, 0);
        -:  818:  // printf("post state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
    #####:  819:  return 0;
        -:  820:}
        -:  821:
    #####:  822:int councilroomEffect(int handPos, struct gameState *state)
        -:  823:{
        -:  824:  int i;
    #####:  825:  int currentPlayer = whoseTurn(state);
        -:  826:  //+4 Cards
    #####:  827:  for (i = 0; i < 4; i++)
        -:  828:  {
    #####:  829:    drawCard(currentPlayer, state);
        -:  830:  }
        -:  831:
        -:  832:  //+1 Buy
    #####:  833:  state->numBuys++;
        -:  834:
        -:  835:  //Each other player draws a card
    #####:  836:  for (i = 0; i < state->numPlayers; i++)
        -:  837:  {
    #####:  838:    if (i != currentPlayer)
        -:  839:    {
    #####:  840:      drawCard(i, state);
        -:  841:    }
        -:  842:  }
        -:  843:
        -:  844:  //put played card in played card pile
    #####:  845:  discardCard(handPos, currentPlayer, state, 0);
        -:  846:
    #####:  847:  return 0;
        -:  848:}
        -:  849:
        4:  850:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  851:{
        -:  852:  int i;
        -:  853:  int j;
        -:  854:  int k;
        -:  855:  int x;
        -:  856:  int index;
        4:  857:  int currentPlayer = whoseTurn(state);
        4:  858:  int nextPlayer = currentPlayer + 1;
        -:  859:
        4:  860:  int tributeRevealedCards[2] = {-1, -1};
        -:  861:  int temphand[MAX_HAND]; // moved above the if statement
        4:  862:  int drawntreasure = 0;
        -:  863:  int cardDrawn;
        4:  864:  int z = 0; // this is the counter for the temp hand
        4:  865:  if (nextPlayer > (state->numPlayers - 1))
        -:  866:  {
    #####:  867:    nextPlayer = 0;
        -:  868:  }
        4:  869:  if (card == great_hall)
        -:  870:  {
    #####:  871:    printf("great_hall\n");
        -:  872:  }
        -:  873:  //uses switch to select card and perform actions
        4:  874:  switch (card)
        -:  875:  {
    #####:  876:  case adventurer:
    #####:  877:    return adventurerEffect(state);
        -:  878:
    #####:  879:  case council_room:
    #####:  880:    return councilroomEffect(handPos, state);
        -:  881:
    #####:  882:  case feast:
        -:  883:    //gain card with cost up to 5
        -:  884:    //Backup hand
    #####:  885:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  886:    {
    #####:  887:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  888:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  889:    }
        -:  890:    //Backup hand
        -:  891:
        -:  892:    //Update Coins for Buy
    #####:  893:    updateCoins(currentPlayer, state, 5);
    #####:  894:    x = 1; //Condition to loop on
    #####:  895:    while (x == 1)
        -:  896:    { //Buy one card
    #####:  897:      if (supplyCount(choice1, state) <= 0)
        -:  898:      {
        -:  899:        if (DEBUG)
        -:  900:          printf("None of that card left, sorry!\n");
        -:  901:
        -:  902:        if (DEBUG)
        -:  903:        {
        -:  904:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  905:        }
        -:  906:      }
    #####:  907:      else if (state->coins < getCost(choice1))
        -:  908:      {
    #####:  909:        printf("That card is too expensive!\n");
        -:  910:
        -:  911:        if (DEBUG)
        -:  912:        {
        -:  913:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  914:        }
        -:  915:      }
        -:  916:      else
        -:  917:      {
        -:  918:
        -:  919:        if (DEBUG)
        -:  920:        {
        -:  921:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:        }
        -:  923:
    #####:  924:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  925:        x = 0;                                      //No more buying cards
        -:  926:
        -:  927:        if (DEBUG)
        -:  928:        {
        -:  929:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:        }
        -:  931:      }
        -:  932:    }
        -:  933:
        -:  934:    //Reset Hand
    #####:  935:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  936:    {
    #####:  937:      state->hand[currentPlayer][i] = temphand[i];
    #####:  938:      temphand[i] = -1;
        -:  939:    }
        -:  940:    //Reset Hand
        -:  941:
    #####:  942:    return 0;
        -:  943:
    #####:  944:  case gardens:
    #####:  945:    return -1;
        -:  946:
        4:  947:  case mine:
        4:  948:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  949:
        4:  950:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  951:    {
        2:  952:      return -1;
        -:  953:    }
        -:  954:
        2:  955:    if (choice2 > treasure_map || choice2 < curse)
        -:  956:    {
    #####:  957:      return -1;
        -:  958:    }
        -:  959:
        2:  960:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  961:    {
        1:  962:      return -1;
        -:  963:    }
        -:  964:
        1:  965:    gainCard(choice2, state, 2, currentPlayer);
        -:  966:
        -:  967:    //discard card from hand
        1:  968:    discardCard(handPos, currentPlayer, state, 0);
        -:  969:
        -:  970:    //discard trashed card
        5:  971:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  972:    {
        5:  973:      if (state->hand[currentPlayer][i] == j)
        -:  974:      {
        1:  975:        discardCard(i, currentPlayer, state, 0);
        1:  976:        break;
        -:  977:      }
        -:  978:    }
        -:  979:
        1:  980:    return 0;
        -:  981:
    #####:  982:  case remodel:
    #####:  983:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  984:
    #####:  985:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  986:    {
    #####:  987:      return -1;
        -:  988:    }
        -:  989:
    #####:  990:    gainCard(choice2, state, 0, currentPlayer);
        -:  991:
        -:  992:    //discard card from hand
    #####:  993:    discardCard(handPos, currentPlayer, state, 0);
        -:  994:
        -:  995:    //discard trashed card
    #####:  996:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  997:    {
    #####:  998:      if (state->hand[currentPlayer][i] == j)
        -:  999:      {
    #####: 1000:        discardCard(i, currentPlayer, state, 0);
    #####: 1001:        break;
        -: 1002:      }
        -: 1003:    }
        -: 1004:
    #####: 1005:    return 0;
        -: 1006:
    #####: 1007:  case smithy:
    #####: 1008:    return smithyEffect(handPos, state);
        -: 1009:
    #####: 1010:  case village:
    #####: 1011:    return villageEffect(handPos, state);
        -: 1012:
    #####: 1013:  case baron:
    #####: 1014:    state->numBuys++; //Increase buys by 1!
    #####: 1015:    if (choice1 > 0)
        -: 1016:    {                             //Boolean true or going to discard an estate
    #####: 1017:      int p = 0;                  //Iterator for hand!
    #####: 1018:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1019:      while (card_not_discarded)
        -: 1020:      {
    #####: 1021:        if (state->hand[currentPlayer][p] == estate)
        -: 1022:        {                    //Found an estate card!
    #####: 1023:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1024:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1025:          state->discardCount[currentPlayer]++;
    #####: 1026:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1027:          {
    #####: 1028:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1029:          }
    #####: 1030:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1031:          state->handCount[currentPlayer]--;
    #####: 1032:          card_not_discarded = 0; //Exit the loop
        -: 1033:        }
    #####: 1034:        else if (p > state->handCount[currentPlayer])
        -: 1035:        {
        -: 1036:          if (DEBUG)
        -: 1037:          {
        -: 1038:            printf("No estate cards in your hand, invalid choice\n");
        -: 1039:            printf("Must gain an estate if there are any\n");
        -: 1040:          }
    #####: 1041:          if (supplyCount(estate, state) > 0)
        -: 1042:          {
    #####: 1043:            gainCard(estate, state, 0, currentPlayer);
    #####: 1044:            state->supplyCount[estate]--; //Decrement estates
    #####: 1045:            if (supplyCount(estate, state) == 0)
        -: 1046:            {
    #####: 1047:              isGameOver(state);
        -: 1048:            }
        -: 1049:          }
    #####: 1050:          card_not_discarded = 0; //Exit the loop
        -: 1051:        }
        -: 1052:
        -: 1053:        else
        -: 1054:        {
    #####: 1055:          p++; //Next card
        -: 1056:        }
        -: 1057:      }
        -: 1058:    }
        -: 1059:
        -: 1060:    else
        -: 1061:    {
    #####: 1062:      if (supplyCount(estate, state) > 0)
        -: 1063:      {
    #####: 1064:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1065:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1066:        if (supplyCount(estate, state) == 0)
        -: 1067:        {
    #####: 1068:          isGameOver(state);
        -: 1069:        }
        -: 1070:      }
        -: 1071:    }
        -: 1072:
    #####: 1073:    return 0;
        -: 1074:
    #####: 1075:  case great_hall:
    #####: 1076:    return greathallEffect(handPos, state);
        -: 1077:
    #####: 1078:  case minion:
        -: 1079:    //+1 action
    #####: 1080:    state->numActions++;
        -: 1081:
        -: 1082:    //discard card from hand
    #####: 1083:    discardCard(handPos, currentPlayer, state, 0);
        -: 1084:
    #####: 1085:    if (choice1) //+2 coins
        -: 1086:    {
    #####: 1087:      state->coins = state->coins + 2;
        -: 1088:    }
        -: 1089:
    #####: 1090:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1091:    {
        -: 1092:      //discard hand
    #####: 1093:      while (numHandCards(state) > 0)
        -: 1094:      {
    #####: 1095:        discardCard(handPos, currentPlayer, state, 0);
        -: 1096:      }
        -: 1097:
        -: 1098:      //draw 4
    #####: 1099:      for (i = 0; i < 4; i++)
        -: 1100:      {
    #####: 1101:        drawCard(currentPlayer, state);
        -: 1102:      }
        -: 1103:
        -: 1104:      //other players discard hand and redraw if hand size > 4
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
        -: 1106:      {
    #####: 1107:        if (i != currentPlayer)
        -: 1108:        {
    #####: 1109:          if (state->handCount[i] > 4)
        -: 1110:          {
        -: 1111:            //discard hand
    #####: 1112:            while (state->handCount[i] > 0)
        -: 1113:            {
    #####: 1114:              discardCard(handPos, i, state, 0);
        -: 1115:            }
        -: 1116:
        -: 1117:            //draw 4
    #####: 1118:            for (j = 0; j < 4; j++)
        -: 1119:            {
    #####: 1120:              drawCard(i, state);
        -: 1121:            }
        -: 1122:          }
        -: 1123:        }
        -: 1124:      }
        -: 1125:    }
    #####: 1126:    return 0;
        -: 1127:
    #####: 1128:  case steward:
    #####: 1129:    if (choice1 == 1)
        -: 1130:    {
        -: 1131:      //+2 cards
    #####: 1132:      drawCard(currentPlayer, state);
    #####: 1133:      drawCard(currentPlayer, state);
        -: 1134:    }
    #####: 1135:    else if (choice1 == 2)
        -: 1136:    {
        -: 1137:      //+2 coins
    #####: 1138:      state->coins = state->coins + 2;
        -: 1139:    }
        -: 1140:    else
        -: 1141:    {
        -: 1142:      //trash 2 cards in hand
    #####: 1143:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:      discardCard(choice3, currentPlayer, state, 1);
        -: 1145:    }
        -: 1146:
        -: 1147:    //discard card from hand
    #####: 1148:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:    return 0;
        -: 1150:
    #####: 1151:  case tribute:
    #####: 1152:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1153:    {
    #####: 1154:      if (state->deckCount[nextPlayer] > 0)
        -: 1155:      {
    #####: 1156:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1157:        state->deckCount[nextPlayer]--;
        -: 1158:      }
    #####: 1159:      else if (state->discardCount[nextPlayer] > 0)
        -: 1160:      {
    #####: 1161:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1162:        state->discardCount[nextPlayer]--;
        -: 1163:      }
        -: 1164:      else
        -: 1165:      {
        -: 1166:        //No Card to Reveal
        -: 1167:        if (DEBUG)
        -: 1168:        {
        -: 1169:          printf("No cards to reveal\n");
        -: 1170:        }
        -: 1171:      }
        -: 1172:    }
        -: 1173:
        -: 1174:    else
        -: 1175:    {
    #####: 1176:      if (state->deckCount[nextPlayer] == 0)
        -: 1177:      {
    #####: 1178:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1179:        {
    #####: 1180:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1181:          state->deckCount[nextPlayer]++;
    #####: 1182:          state->discard[nextPlayer][i] = -1;
    #####: 1183:          state->discardCount[nextPlayer]--;
        -: 1184:        }
        -: 1185:
    #####: 1186:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1187:      }
    #####: 1188:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1189:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:      state->deckCount[nextPlayer]--;
    #####: 1191:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1192:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:      state->deckCount[nextPlayer]--;
        -: 1194:    }
        -: 1195:
    #####: 1196:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1197:    { //If we have a duplicate card, just drop one
    #####: 1198:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1199:      state->playedCardCount++;
    #####: 1200:      tributeRevealedCards[1] = -1;
        -: 1201:    }
        -: 1202:
    #####: 1203:    for (i = 0; i <= 2; i++)
        -: 1204:    {
    #####: 1205:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1206:      { //Treasure cards
    #####: 1207:        state->coins += 2;
        -: 1208:      }
        -: 1209:
    #####: 1210:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1211:      { //Victory Card Found
    #####: 1212:        drawCard(currentPlayer, state);
    #####: 1213:        drawCard(currentPlayer, state);
        -: 1214:      }
        -: 1215:      else
        -: 1216:      { //Action Card
    #####: 1217:        state->numActions = state->numActions + 2;
        -: 1218:      }
        -: 1219:    }
        -: 1220:
    #####: 1221:    return 0;
        -: 1222:
    #####: 1223:  case ambassador:
    #####: 1224:    j = 0; //used to check if player has enough cards to discard
        -: 1225:
    #####: 1226:    if (choice2 > 2 || choice2 < 0)
        -: 1227:    {
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:    if (choice1 == handPos)
        -: 1232:    {
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:
    #####: 1236:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:    {
    #####: 1238:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1239:      {
    #####: 1240:        j++;
        -: 1241:      }
        -: 1242:    }
    #####: 1243:    if (j < choice2)
        -: 1244:    {
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:
        -: 1248:    if (DEBUG)
        -: 1249:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1250:
        -: 1251:    //increase supply count for choosen card by amount being discarded
    #####: 1252:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1253:
        -: 1254:    //each other player gains a copy of revealed card
    #####: 1255:    for (i = 0; i < state->numPlayers; i++)
        -: 1256:    {
    #####: 1257:      if (i != currentPlayer)
        -: 1258:      {
    #####: 1259:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1260:      }
        -: 1261:    }
        -: 1262:
        -: 1263:    //discard played card from hand
    #####: 1264:    discardCard(handPos, currentPlayer, state, 0);
        -: 1265:
        -: 1266:    //trash copies of cards returned to supply
    #####: 1267:    for (j = 0; j < choice2; j++)
        -: 1268:    {
    #####: 1269:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:      {
    #####: 1271:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1272:        {
    #####: 1273:          discardCard(i, currentPlayer, state, 1);
    #####: 1274:          break;
        -: 1275:        }
        -: 1276:      }
        -: 1277:    }
        -: 1278:
    #####: 1279:    return 0;
        -: 1280:
    #####: 1281:  case cutpurse:
        -: 1282:
    #####: 1283:    updateCoins(currentPlayer, state, 2);
    #####: 1284:    for (i = 0; i < state->numPlayers; i++)
        -: 1285:    {
    #####: 1286:      if (i != currentPlayer)
        -: 1287:      {
    #####: 1288:        for (j = 0; j < state->handCount[i]; j++)
        -: 1289:        {
    #####: 1290:          if (state->hand[i][j] == copper)
        -: 1291:          {
    #####: 1292:            discardCard(j, i, state, 0);
    #####: 1293:            break;
        -: 1294:          }
    #####: 1295:          if (j == state->handCount[i])
        -: 1296:          {
    #####: 1297:            for (k = 0; k < state->handCount[i]; k++)
        -: 1298:            {
        -: 1299:              if (DEBUG)
        -: 1300:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1301:            }
    #####: 1302:            break;
        -: 1303:          }
        -: 1304:        }
        -: 1305:      }
        -: 1306:    }
        -: 1307:
        -: 1308:    //discard played card from hand
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0);
        -: 1310:
    #####: 1311:    return 0;
        -: 1312:
    #####: 1313:  case embargo:
        -: 1314:    //+2 Coins
    #####: 1315:    state->coins = state->coins + 2;
        -: 1316:
        -: 1317:    //see if selected pile is in play
    #####: 1318:    if (state->supplyCount[choice1] == -1)
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:    //add embargo token to selected supply pile
    #####: 1324:    state->embargoTokens[choice1]++;
        -: 1325:
        -: 1326:    //trash card
    #####: 1327:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1328:    return 0;
        -: 1329:
    #####: 1330:  case outpost:
        -: 1331:    //set outpost flag
    #####: 1332:    state->outpostPlayed++;
        -: 1333:
        -: 1334:    //discard card
    #####: 1335:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:    return 0;
        -: 1337:
    #####: 1338:  case salvager:
        -: 1339:    //+1 buy
    #####: 1340:    state->numBuys++;
        -: 1341:
    #####: 1342:    if (choice1)
        -: 1343:    {
        -: 1344:      //gain coins equal to trashed card
    #####: 1345:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1346:      //trash card
    #####: 1347:      discardCard(choice1, currentPlayer, state, 1);
        -: 1348:    }
        -: 1349:
        -: 1350:    //discard card
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1352:    return 0;
        -: 1353:
    #####: 1354:  case sea_hag:
    #####: 1355:    for (i = 0; i < state->numPlayers; i++)
        -: 1356:    {
    #####: 1357:      if (i != currentPlayer)
        -: 1358:      {
    #####: 1359:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1360:        state->deckCount[i]--;
    #####: 1361:        state->discardCount[i]++;
    #####: 1362:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1363:      }
        -: 1364:    }
    #####: 1365:    return 0;
        -: 1366:
    #####: 1367:  case treasure_map:
        -: 1368:    //search hand for another treasure_map
    #####: 1369:    index = -1;
    #####: 1370:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1371:    {
    #####: 1372:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1373:      {
    #####: 1374:        index = i;
    #####: 1375:        break;
        -: 1376:      }
        -: 1377:    }
    #####: 1378:    if (index > -1)
        -: 1379:    {
        -: 1380:      //trash both treasure cards
    #####: 1381:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1382:      discardCard(index, currentPlayer, state, 1);
        -: 1383:
        -: 1384:      //gain 4 Gold cards
    #####: 1385:      for (i = 0; i < 4; i++)
        -: 1386:      {
    #####: 1387:        gainCard(gold, state, 1, currentPlayer);
        -: 1388:      }
        -: 1389:
        -: 1390:      //return success
    #####: 1391:      return 1;
        -: 1392:    }
        -: 1393:
        -: 1394:    //no second treasure_map found in hand
    #####: 1395:    return -1;
        -: 1396:  }
        -: 1397:
    #####: 1398:  return -1;
        -: 1399:}
        -: 1400:
        2: 1401:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1402:{
        -: 1403:
        -: 1404:  //if card is not trashed, added to Played pile
        2: 1405:  if (trashFlag < 1)
        -: 1406:  {
        -: 1407:    //add card to played pile
        2: 1408:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1409:    state->playedCardCount++;
        -: 1410:  }
        -: 1411:
        -: 1412:  //set played card to -1
        2: 1413:  state->hand[currentPlayer][handPos] = -1;
        -: 1414:
        -: 1415:  //remove card from player's hand
        2: 1416:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1417:  {
        -: 1418:    //reduce number of cards in hand
        1: 1419:    state->handCount[currentPlayer]--;
        -: 1420:  }
        1: 1421:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1422:  {
        -: 1423:    //reduce number of cards in hand
    #####: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:  else
        -: 1427:  {
        -: 1428:    //replace discarded card with last card in hand
        1: 1429:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1430:    //set last card to -1
        1: 1431:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1432:    //reduce number of cards in hand
        1: 1433:    state->handCount[currentPlayer]--;
        -: 1434:  }
        -: 1435:
        2: 1436:  return 0;
        -: 1437:}
        -: 1438:
        1: 1439:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1440:{
        -: 1441:  //Note: supplyPos is enum of choosen card
        -: 1442:
        -: 1443:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1444:  if (supplyCount(supplyPos, state) < 1)
        -: 1445:  {
    #####: 1446:    return -1;
        -: 1447:  }
        -: 1448:
        -: 1449:  //added card for [whoseTurn] current player:
        -: 1450:  // toFlag = 0 : add to discard
        -: 1451:  // toFlag = 1 : add to deck
        -: 1452:  // toFlag = 2 : add to hand
        -: 1453:
        1: 1454:  if (toFlag == 1)
        -: 1455:  {
    #####: 1456:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1457:    state->deckCount[player]++;
        -: 1458:  }
        1: 1459:  else if (toFlag == 2)
        -: 1460:  {
        1: 1461:    state->hand[player][state->handCount[player]] = supplyPos;
        1: 1462:    state->handCount[player]++;
        -: 1463:  }
        -: 1464:  else
        -: 1465:  {
    #####: 1466:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1467:    state->discardCount[player]++;
        -: 1468:  }
        -: 1469:
        -: 1470:  //decrease number in supply pile
        1: 1471:  state->supplyCount[supplyPos]--;
        -: 1472:
        1: 1473:  return 0;
        -: 1474:}
        -: 1475:
        1: 1476:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1477:{
        -: 1478:  int i;
        -: 1479:
        -: 1480:  //reset coin count
        1: 1481:  state->coins = 0;
        -: 1482:
        -: 1483:  //add coins for each Treasure card in player's hand
        6: 1484:  for (i = 0; i < state->handCount[player]; i++)
        -: 1485:  {
        5: 1486:    if (state->hand[player][i] == copper)
        -: 1487:    {
        4: 1488:      state->coins += 1;
        -: 1489:    }
        1: 1490:    else if (state->hand[player][i] == silver)
        -: 1491:    {
    #####: 1492:      state->coins += 2;
        -: 1493:    }
        1: 1494:    else if (state->hand[player][i] == gold)
        -: 1495:    {
    #####: 1496:      state->coins += 3;
        -: 1497:    }
        -: 1498:  }
        -: 1499:
        -: 1500:  //add bonus
        1: 1501:  state->coins += bonus;
        -: 1502:
        1: 1503:  return 0;
        -: 1504:}
        -: 1505:
        -: 1506://end of dominion.c
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void *a, const void *b)
        -:    9:{
       30:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       30:   12:  if (*(int *)a < *(int *)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
        1:   17:struct gameState *newGame()
        -:   18:{
        1:   19:  struct gameState *g = malloc(sizeof(struct gameState));
        1:   20:  return g;
        -:   21:}
        -:   22:
        1:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
        1:   26:  int *k = malloc(10 * sizeof(int));
        1:   27:  k[0] = k1;
        1:   28:  k[1] = k2;
        1:   29:  k[2] = k3;
        1:   30:  k[3] = k4;
        1:   31:  k[4] = k5;
        1:   32:  k[5] = k6;
        1:   33:  k[6] = k7;
        1:   34:  k[7] = k8;
        1:   35:  k[8] = k9;
        1:   36:  k[9] = k10;
        1:   37:  return k;
        -:   38:}
        -:   39:
        1:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        1:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       11:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      110:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       21:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      214:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      197:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
        3:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
    #####:  118:          if (numPlayers == 2)
        -:  119:          {
    #####:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
        3:  129:          state->supplyCount[i] = 10;
        -:  130:        }
        3:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      194:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        3:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
        8:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        -:  151:    }
       16:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        3:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        3:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       28:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
        6:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       20:  223:    card = floor(Random() * state->deckCount[player]);
       20:  224:    newDeck[newDeckPos] = state->deck[player][card];
       20:  225:    newDeckPos++;
       67:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
       47:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       20:  230:    state->deckCount[player]--;
        -:  231:  }
       22:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       20:  234:    state->deck[player][i] = newDeck[i];
       20:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        2:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        1:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        1:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        4:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        4:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        5:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
        5:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
        5:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
        5:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
        5:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
        5:  672:    state->deckCount[player]--;
        5:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
        5:  676:  return 0;
        -:  677:}
        -:  678:
        4:  679:int getCost(int cardNumber)
        -:  680:{
        4:  681:  switch (cardNumber)
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
        2:  691:  case copper:
        2:  692:    return 0;
        1:  693:  case silver:
        1:  694:    return 3;
        1:  695:  case gold:
        1:  696:    return 6;
    #####:  697:  case adventurer:
    #####:  698:    return 6;
    #####:  699:  case council_room:
    #####:  700:    return 5;
    #####:  701:  case feast:
    #####:  702:    return 4;
    #####:  703:  case gardens:
    #####:  704:    return 4;
    #####:  705:  case mine:
    #####:  706:    return 5;
    #####:  707:  case remodel:
    #####:  708:    return 4;
    #####:  709:  case smithy:
    #####:  710:    return 4;
    #####:  711:  case village:
    #####:  712:    return 3;
    #####:  713:  case baron:
    #####:  714:    return 4;
    #####:  715:  case great_hall:
    #####:  716:    return 3;
    #####:  717:  case minion:
    #####:  718:    return 5;
    #####:  719:  case steward:
    #####:  720:    return 3;
    #####:  721:  case tribute:
    #####:  722:    return 5;
    #####:  723:  case ambassador:
    #####:  724:    return 3;
    #####:  725:  case cutpurse:
    #####:  726:    return 4;
    #####:  727:  case embargo:
    #####:  728:    return 2;
    #####:  729:  case outpost:
    #####:  730:    return 5;
    #####:  731:  case salvager:
    #####:  732:    return 4;
    #####:  733:  case sea_hag:
    #####:  734:    return 4;
    #####:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int smithyEffect(int handPos, struct gameState *state)
        -:  743:{
    #####:  744:  int currentPlayer = whoseTurn(state);
        -:  745:  int i;
        -:  746:
        -:  747:  //+3 Cards
    #####:  748:  for (i = 0; i < 3; i++)
        -:  749:  {
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:  }
        -:  752:
        -:  753:  //discard card from hand
    #####:  754:  discardCard(handPos--, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int adventurerEffect(struct gameState *state)
        -:  759:{
    #####:  760:  int drawntreasure = 0;
    #####:  761:  int currentPlayer = whoseTurn(state);
        -:  762:  int cardDrawn;
        -:  763:  int temphand[MAX_HAND];
    #####:  764:  int z = 0;
        -:  765:
    #####:  766:  while (drawntreasure < 2)
        -:  767:  {
    #####:  768:    if (state->deckCount[currentPlayer] < 1)
        -:  769:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  770:      shuffle(currentPlayer, state);
        -:  771:    }
    #####:  772:    drawCard(currentPlayer, state);
    #####:  773:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####:  774:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  775:      drawntreasure++;
        -:  776:    else
        -:  777:    {
    #####:  778:      temphand[z] = cardDrawn;
    #####:  779:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  780:      z++;
        -:  781:    }
        -:  782:  }
    #####:  783:  while (z - 1 >= 0)
        -:  784:  {
    #####:  785:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  786:    z = z - 1;
        -:  787:  }
    #####:  788:  return 0;
        -:  789:}
        -:  790:
    #####:  791:int villageEffect(int handPos, struct gameState *state)
        -:  792:{
    #####:  793:  int currentPlayer = whoseTurn(state);
        -:  794:
        -:  795:  //+1 Card
    #####:  796:  drawCard(currentPlayer, state);
        -:  797:
        -:  798:  //+2 Actions
    #####:  799:  state->numActions = state->numActions + 2;
        -:  800:
        -:  801:  //discard played card from hand
    #####:  802:  discardCard(handPos, currentPlayer, state, 0);
    #####:  803:  return 0;
        -:  804:}
        -:  805:
    #####:  806:int greathallEffect(int handPos, struct gameState *state)
        -:  807:{
    #####:  808:  int currentPlayer = whoseTurn(state);
        -:  809:  //printf("prev state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
        -:  810:  //+1 Card
    #####:  811:  drawCard(currentPlayer, state);
        -:  812:
        -:  813:  //+1 Actions
    #####:  814:  state->numActions++;
        -:  815:
        -:  816:  //discard card from hand
    #####:  817:  discardCard(handPos, currentPlayer, state, 0);
        -:  818:  // printf("post state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
    #####:  819:  return 0;
        -:  820:}
        -:  821:
    #####:  822:int councilroomEffect(int handPos, struct gameState *state)
        -:  823:{
        -:  824:  int i;
    #####:  825:  int currentPlayer = whoseTurn(state);
        -:  826:  //+4 Cards
    #####:  827:  for (i = 0; i < 4; i++)
        -:  828:  {
    #####:  829:    drawCard(currentPlayer, state);
        -:  830:  }
        -:  831:
        -:  832:  //+1 Buy
    #####:  833:  state->numBuys++;
        -:  834:
        -:  835:  //Each other player draws a card
    #####:  836:  for (i = 0; i < state->numPlayers; i++)
        -:  837:  {
    #####:  838:    if (i != currentPlayer)
        -:  839:    {
    #####:  840:      drawCard(i, state);
        -:  841:    }
        -:  842:  }
        -:  843:
        -:  844:  //put played card in played card pile
    #####:  845:  discardCard(handPos, currentPlayer, state, 0);
        -:  846:
    #####:  847:  return 0;
        -:  848:}
        -:  849:
        4:  850:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  851:{
        -:  852:  int i;
        -:  853:  int j;
        -:  854:  int k;
        -:  855:  int x;
        -:  856:  int index;
        4:  857:  int currentPlayer = whoseTurn(state);
        4:  858:  int nextPlayer = currentPlayer + 1;
        -:  859:
        4:  860:  int tributeRevealedCards[2] = {-1, -1};
        -:  861:  int temphand[MAX_HAND]; // moved above the if statement
        4:  862:  int drawntreasure = 0;
        -:  863:  int cardDrawn;
        4:  864:  int z = 0; // this is the counter for the temp hand
        4:  865:  if (nextPlayer > (state->numPlayers - 1))
        -:  866:  {
    #####:  867:    nextPlayer = 0;
        -:  868:  }
        4:  869:  if (card == great_hall)
        -:  870:  {
    #####:  871:    printf("great_hall\n");
        -:  872:  }
        -:  873:  //uses switch to select card and perform actions
        4:  874:  switch (card)
        -:  875:  {
    #####:  876:  case adventurer:
    #####:  877:    return adventurerEffect(state);
        -:  878:
    #####:  879:  case council_room:
    #####:  880:    return councilroomEffect(handPos, state);
        -:  881:
    #####:  882:  case feast:
        -:  883:    //gain card with cost up to 5
        -:  884:    //Backup hand
    #####:  885:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  886:    {
    #####:  887:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  888:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  889:    }
        -:  890:    //Backup hand
        -:  891:
        -:  892:    //Update Coins for Buy
    #####:  893:    updateCoins(currentPlayer, state, 5);
    #####:  894:    x = 1; //Condition to loop on
    #####:  895:    while (x == 1)
        -:  896:    { //Buy one card
    #####:  897:      if (supplyCount(choice1, state) <= 0)
        -:  898:      {
        -:  899:        if (DEBUG)
        -:  900:          printf("None of that card left, sorry!\n");
        -:  901:
        -:  902:        if (DEBUG)
        -:  903:        {
        -:  904:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  905:        }
        -:  906:      }
    #####:  907:      else if (state->coins < getCost(choice1))
        -:  908:      {
    #####:  909:        printf("That card is too expensive!\n");
        -:  910:
        -:  911:        if (DEBUG)
        -:  912:        {
        -:  913:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  914:        }
        -:  915:      }
        -:  916:      else
        -:  917:      {
        -:  918:
        -:  919:        if (DEBUG)
        -:  920:        {
        -:  921:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:        }
        -:  923:
    #####:  924:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  925:        x = 0;                                      //No more buying cards
        -:  926:
        -:  927:        if (DEBUG)
        -:  928:        {
        -:  929:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:        }
        -:  931:      }
        -:  932:    }
        -:  933:
        -:  934:    //Reset Hand
    #####:  935:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  936:    {
    #####:  937:      state->hand[currentPlayer][i] = temphand[i];
    #####:  938:      temphand[i] = -1;
        -:  939:    }
        -:  940:    //Reset Hand
        -:  941:
    #####:  942:    return 0;
        -:  943:
    #####:  944:  case gardens:
    #####:  945:    return -1;
        -:  946:
        4:  947:  case mine:
        4:  948:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  949:
        4:  950:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  951:    {
        2:  952:      return -1;
        -:  953:    }
        -:  954:
        2:  955:    if (choice2 > treasure_map || choice2 < curse)
        -:  956:    {
    #####:  957:      return -1;
        -:  958:    }
        -:  959:
        2:  960:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  961:    {
        1:  962:      return -1;
        -:  963:    }
        -:  964:
        1:  965:    gainCard(choice2, state, 2, currentPlayer);
        -:  966:
        -:  967:    //discard card from hand
        1:  968:    discardCard(handPos, currentPlayer, state, 0);
        -:  969:
        -:  970:    //discard trashed card
        5:  971:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  972:    {
        5:  973:      if (state->hand[currentPlayer][i] == j)
        -:  974:      {
        1:  975:        discardCard(i, currentPlayer, state, 0);
        1:  976:        break;
        -:  977:      }
        -:  978:    }
        -:  979:
        1:  980:    return 0;
        -:  981:
    #####:  982:  case remodel:
    #####:  983:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  984:
    #####:  985:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  986:    {
    #####:  987:      return -1;
        -:  988:    }
        -:  989:
    #####:  990:    gainCard(choice2, state, 0, currentPlayer);
        -:  991:
        -:  992:    //discard card from hand
    #####:  993:    discardCard(handPos, currentPlayer, state, 0);
        -:  994:
        -:  995:    //discard trashed card
    #####:  996:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  997:    {
    #####:  998:      if (state->hand[currentPlayer][i] == j)
        -:  999:      {
    #####: 1000:        discardCard(i, currentPlayer, state, 0);
    #####: 1001:        break;
        -: 1002:      }
        -: 1003:    }
        -: 1004:
    #####: 1005:    return 0;
        -: 1006:
    #####: 1007:  case smithy:
    #####: 1008:    return smithyEffect(handPos, state);
        -: 1009:
    #####: 1010:  case village:
    #####: 1011:    return villageEffect(handPos, state);
        -: 1012:
    #####: 1013:  case baron:
    #####: 1014:    state->numBuys++; //Increase buys by 1!
    #####: 1015:    if (choice1 > 0)
        -: 1016:    {                             //Boolean true or going to discard an estate
    #####: 1017:      int p = 0;                  //Iterator for hand!
    #####: 1018:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1019:      while (card_not_discarded)
        -: 1020:      {
    #####: 1021:        if (state->hand[currentPlayer][p] == estate)
        -: 1022:        {                    //Found an estate card!
    #####: 1023:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1024:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1025:          state->discardCount[currentPlayer]++;
    #####: 1026:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1027:          {
    #####: 1028:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1029:          }
    #####: 1030:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1031:          state->handCount[currentPlayer]--;
    #####: 1032:          card_not_discarded = 0; //Exit the loop
        -: 1033:        }
    #####: 1034:        else if (p > state->handCount[currentPlayer])
        -: 1035:        {
        -: 1036:          if (DEBUG)
        -: 1037:          {
        -: 1038:            printf("No estate cards in your hand, invalid choice\n");
        -: 1039:            printf("Must gain an estate if there are any\n");
        -: 1040:          }
    #####: 1041:          if (supplyCount(estate, state) > 0)
        -: 1042:          {
    #####: 1043:            gainCard(estate, state, 0, currentPlayer);
    #####: 1044:            state->supplyCount[estate]--; //Decrement estates
    #####: 1045:            if (supplyCount(estate, state) == 0)
        -: 1046:            {
    #####: 1047:              isGameOver(state);
        -: 1048:            }
        -: 1049:          }
    #####: 1050:          card_not_discarded = 0; //Exit the loop
        -: 1051:        }
        -: 1052:
        -: 1053:        else
        -: 1054:        {
    #####: 1055:          p++; //Next card
        -: 1056:        }
        -: 1057:      }
        -: 1058:    }
        -: 1059:
        -: 1060:    else
        -: 1061:    {
    #####: 1062:      if (supplyCount(estate, state) > 0)
        -: 1063:      {
    #####: 1064:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1065:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1066:        if (supplyCount(estate, state) == 0)
        -: 1067:        {
    #####: 1068:          isGameOver(state);
        -: 1069:        }
        -: 1070:      }
        -: 1071:    }
        -: 1072:
    #####: 1073:    return 0;
        -: 1074:
    #####: 1075:  case great_hall:
    #####: 1076:    return greathallEffect(handPos, state);
        -: 1077:
    #####: 1078:  case minion:
        -: 1079:    //+1 action
    #####: 1080:    state->numActions++;
        -: 1081:
        -: 1082:    //discard card from hand
    #####: 1083:    discardCard(handPos, currentPlayer, state, 0);
        -: 1084:
    #####: 1085:    if (choice1) //+2 coins
        -: 1086:    {
    #####: 1087:      state->coins = state->coins + 2;
        -: 1088:    }
        -: 1089:
    #####: 1090:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1091:    {
        -: 1092:      //discard hand
    #####: 1093:      while (numHandCards(state) > 0)
        -: 1094:      {
    #####: 1095:        discardCard(handPos, currentPlayer, state, 0);
        -: 1096:      }
        -: 1097:
        -: 1098:      //draw 4
    #####: 1099:      for (i = 0; i < 4; i++)
        -: 1100:      {
    #####: 1101:        drawCard(currentPlayer, state);
        -: 1102:      }
        -: 1103:
        -: 1104:      //other players discard hand and redraw if hand size > 4
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
        -: 1106:      {
    #####: 1107:        if (i != currentPlayer)
        -: 1108:        {
    #####: 1109:          if (state->handCount[i] > 4)
        -: 1110:          {
        -: 1111:            //discard hand
    #####: 1112:            while (state->handCount[i] > 0)
        -: 1113:            {
    #####: 1114:              discardCard(handPos, i, state, 0);
        -: 1115:            }
        -: 1116:
        -: 1117:            //draw 4
    #####: 1118:            for (j = 0; j < 4; j++)
        -: 1119:            {
    #####: 1120:              drawCard(i, state);
        -: 1121:            }
        -: 1122:          }
        -: 1123:        }
        -: 1124:      }
        -: 1125:    }
    #####: 1126:    return 0;
        -: 1127:
    #####: 1128:  case steward:
    #####: 1129:    if (choice1 == 1)
        -: 1130:    {
        -: 1131:      //+2 cards
    #####: 1132:      drawCard(currentPlayer, state);
    #####: 1133:      drawCard(currentPlayer, state);
        -: 1134:    }
    #####: 1135:    else if (choice1 == 2)
        -: 1136:    {
        -: 1137:      //+2 coins
    #####: 1138:      state->coins = state->coins + 2;
        -: 1139:    }
        -: 1140:    else
        -: 1141:    {
        -: 1142:      //trash 2 cards in hand
    #####: 1143:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:      discardCard(choice3, currentPlayer, state, 1);
        -: 1145:    }
        -: 1146:
        -: 1147:    //discard card from hand
    #####: 1148:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:    return 0;
        -: 1150:
    #####: 1151:  case tribute:
    #####: 1152:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1153:    {
    #####: 1154:      if (state->deckCount[nextPlayer] > 0)
        -: 1155:      {
    #####: 1156:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1157:        state->deckCount[nextPlayer]--;
        -: 1158:      }
    #####: 1159:      else if (state->discardCount[nextPlayer] > 0)
        -: 1160:      {
    #####: 1161:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1162:        state->discardCount[nextPlayer]--;
        -: 1163:      }
        -: 1164:      else
        -: 1165:      {
        -: 1166:        //No Card to Reveal
        -: 1167:        if (DEBUG)
        -: 1168:        {
        -: 1169:          printf("No cards to reveal\n");
        -: 1170:        }
        -: 1171:      }
        -: 1172:    }
        -: 1173:
        -: 1174:    else
        -: 1175:    {
    #####: 1176:      if (state->deckCount[nextPlayer] == 0)
        -: 1177:      {
    #####: 1178:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1179:        {
    #####: 1180:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1181:          state->deckCount[nextPlayer]++;
    #####: 1182:          state->discard[nextPlayer][i] = -1;
    #####: 1183:          state->discardCount[nextPlayer]--;
        -: 1184:        }
        -: 1185:
    #####: 1186:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1187:      }
    #####: 1188:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1189:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:      state->deckCount[nextPlayer]--;
    #####: 1191:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1192:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:      state->deckCount[nextPlayer]--;
        -: 1194:    }
        -: 1195:
    #####: 1196:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1197:    { //If we have a duplicate card, just drop one
    #####: 1198:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1199:      state->playedCardCount++;
    #####: 1200:      tributeRevealedCards[1] = -1;
        -: 1201:    }
        -: 1202:
    #####: 1203:    for (i = 0; i <= 2; i++)
        -: 1204:    {
    #####: 1205:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1206:      { //Treasure cards
    #####: 1207:        state->coins += 2;
        -: 1208:      }
        -: 1209:
    #####: 1210:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1211:      { //Victory Card Found
    #####: 1212:        drawCard(currentPlayer, state);
    #####: 1213:        drawCard(currentPlayer, state);
        -: 1214:      }
        -: 1215:      else
        -: 1216:      { //Action Card
    #####: 1217:        state->numActions = state->numActions + 2;
        -: 1218:      }
        -: 1219:    }
        -: 1220:
    #####: 1221:    return 0;
        -: 1222:
    #####: 1223:  case ambassador:
    #####: 1224:    j = 0; //used to check if player has enough cards to discard
        -: 1225:
    #####: 1226:    if (choice2 > 2 || choice2 < 0)
        -: 1227:    {
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:    if (choice1 == handPos)
        -: 1232:    {
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:
    #####: 1236:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:    {
    #####: 1238:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1239:      {
    #####: 1240:        j++;
        -: 1241:      }
        -: 1242:    }
    #####: 1243:    if (j < choice2)
        -: 1244:    {
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:
        -: 1248:    if (DEBUG)
        -: 1249:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1250:
        -: 1251:    //increase supply count for choosen card by amount being discarded
    #####: 1252:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1253:
        -: 1254:    //each other player gains a copy of revealed card
    #####: 1255:    for (i = 0; i < state->numPlayers; i++)
        -: 1256:    {
    #####: 1257:      if (i != currentPlayer)
        -: 1258:      {
    #####: 1259:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1260:      }
        -: 1261:    }
        -: 1262:
        -: 1263:    //discard played card from hand
    #####: 1264:    discardCard(handPos, currentPlayer, state, 0);
        -: 1265:
        -: 1266:    //trash copies of cards returned to supply
    #####: 1267:    for (j = 0; j < choice2; j++)
        -: 1268:    {
    #####: 1269:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:      {
    #####: 1271:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1272:        {
    #####: 1273:          discardCard(i, currentPlayer, state, 1);
    #####: 1274:          break;
        -: 1275:        }
        -: 1276:      }
        -: 1277:    }
        -: 1278:
    #####: 1279:    return 0;
        -: 1280:
    #####: 1281:  case cutpurse:
        -: 1282:
    #####: 1283:    updateCoins(currentPlayer, state, 2);
    #####: 1284:    for (i = 0; i < state->numPlayers; i++)
        -: 1285:    {
    #####: 1286:      if (i != currentPlayer)
        -: 1287:      {
    #####: 1288:        for (j = 0; j < state->handCount[i]; j++)
        -: 1289:        {
    #####: 1290:          if (state->hand[i][j] == copper)
        -: 1291:          {
    #####: 1292:            discardCard(j, i, state, 0);
    #####: 1293:            break;
        -: 1294:          }
    #####: 1295:          if (j == state->handCount[i])
        -: 1296:          {
    #####: 1297:            for (k = 0; k < state->handCount[i]; k++)
        -: 1298:            {
        -: 1299:              if (DEBUG)
        -: 1300:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1301:            }
    #####: 1302:            break;
        -: 1303:          }
        -: 1304:        }
        -: 1305:      }
        -: 1306:    }
        -: 1307:
        -: 1308:    //discard played card from hand
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0);
        -: 1310:
    #####: 1311:    return 0;
        -: 1312:
    #####: 1313:  case embargo:
        -: 1314:    //+2 Coins
    #####: 1315:    state->coins = state->coins + 2;
        -: 1316:
        -: 1317:    //see if selected pile is in play
    #####: 1318:    if (state->supplyCount[choice1] == -1)
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:    //add embargo token to selected supply pile
    #####: 1324:    state->embargoTokens[choice1]++;
        -: 1325:
        -: 1326:    //trash card
    #####: 1327:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1328:    return 0;
        -: 1329:
    #####: 1330:  case outpost:
        -: 1331:    //set outpost flag
    #####: 1332:    state->outpostPlayed++;
        -: 1333:
        -: 1334:    //discard card
    #####: 1335:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:    return 0;
        -: 1337:
    #####: 1338:  case salvager:
        -: 1339:    //+1 buy
    #####: 1340:    state->numBuys++;
        -: 1341:
    #####: 1342:    if (choice1)
        -: 1343:    {
        -: 1344:      //gain coins equal to trashed card
    #####: 1345:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1346:      //trash card
    #####: 1347:      discardCard(choice1, currentPlayer, state, 1);
        -: 1348:    }
        -: 1349:
        -: 1350:    //discard card
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1352:    return 0;
        -: 1353:
    #####: 1354:  case sea_hag:
    #####: 1355:    for (i = 0; i < state->numPlayers; i++)
        -: 1356:    {
    #####: 1357:      if (i != currentPlayer)
        -: 1358:      {
    #####: 1359:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1360:        state->deckCount[i]--;
    #####: 1361:        state->discardCount[i]++;
    #####: 1362:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1363:      }
        -: 1364:    }
    #####: 1365:    return 0;
        -: 1366:
    #####: 1367:  case treasure_map:
        -: 1368:    //search hand for another treasure_map
    #####: 1369:    index = -1;
    #####: 1370:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1371:    {
    #####: 1372:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1373:      {
    #####: 1374:        index = i;
    #####: 1375:        break;
        -: 1376:      }
        -: 1377:    }
    #####: 1378:    if (index > -1)
        -: 1379:    {
        -: 1380:      //trash both treasure cards
    #####: 1381:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1382:      discardCard(index, currentPlayer, state, 1);
        -: 1383:
        -: 1384:      //gain 4 Gold cards
    #####: 1385:      for (i = 0; i < 4; i++)
        -: 1386:      {
    #####: 1387:        gainCard(gold, state, 1, currentPlayer);
        -: 1388:      }
        -: 1389:
        -: 1390:      //return success
    #####: 1391:      return 1;
        -: 1392:    }
        -: 1393:
        -: 1394:    //no second treasure_map found in hand
    #####: 1395:    return -1;
        -: 1396:  }
        -: 1397:
    #####: 1398:  return -1;
        -: 1399:}
        -: 1400:
        2: 1401:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1402:{
        -: 1403:
        -: 1404:  //if card is not trashed, added to Played pile
        2: 1405:  if (trashFlag < 1)
        -: 1406:  {
        -: 1407:    //add card to played pile
        2: 1408:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1409:    state->playedCardCount++;
        -: 1410:  }
        -: 1411:
        -: 1412:  //set played card to -1
        2: 1413:  state->hand[currentPlayer][handPos] = -1;
        -: 1414:
        -: 1415:  //remove card from player's hand
        2: 1416:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1417:  {
        -: 1418:    //reduce number of cards in hand
        1: 1419:    state->handCount[currentPlayer]--;
        -: 1420:  }
        1: 1421:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1422:  {
        -: 1423:    //reduce number of cards in hand
    #####: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:  else
        -: 1427:  {
        -: 1428:    //replace discarded card with last card in hand
        1: 1429:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1430:    //set last card to -1
        1: 1431:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1432:    //reduce number of cards in hand
        1: 1433:    state->handCount[currentPlayer]--;
        -: 1434:  }
        -: 1435:
        2: 1436:  return 0;
        -: 1437:}
        -: 1438:
        1: 1439:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1440:{
        -: 1441:  //Note: supplyPos is enum of choosen card
        -: 1442:
        -: 1443:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1444:  if (supplyCount(supplyPos, state) < 1)
        -: 1445:  {
    #####: 1446:    return -1;
        -: 1447:  }
        -: 1448:
        -: 1449:  //added card for [whoseTurn] current player:
        -: 1450:  // toFlag = 0 : add to discard
        -: 1451:  // toFlag = 1 : add to deck
        -: 1452:  // toFlag = 2 : add to hand
        -: 1453:
        1: 1454:  if (toFlag == 1)
        -: 1455:  {
    #####: 1456:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1457:    state->deckCount[player]++;
        -: 1458:  }
        1: 1459:  else if (toFlag == 2)
        -: 1460:  {
        1: 1461:    state->hand[player][state->handCount[player]] = supplyPos;
        1: 1462:    state->handCount[player]++;
        -: 1463:  }
        -: 1464:  else
        -: 1465:  {
    #####: 1466:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1467:    state->discardCount[player]++;
        -: 1468:  }
        -: 1469:
        -: 1470:  //decrease number in supply pile
        1: 1471:  state->supplyCount[supplyPos]--;
        -: 1472:
        1: 1473:  return 0;
        -: 1474:}
        -: 1475:
        1: 1476:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1477:{
        -: 1478:  int i;
        -: 1479:
        -: 1480:  //reset coin count
        1: 1481:  state->coins = 0;
        -: 1482:
        -: 1483:  //add coins for each Treasure card in player's hand
        6: 1484:  for (i = 0; i < state->handCount[player]; i++)
        -: 1485:  {
        5: 1486:    if (state->hand[player][i] == copper)
        -: 1487:    {
        4: 1488:      state->coins += 1;
        -: 1489:    }
        1: 1490:    else if (state->hand[player][i] == silver)
        -: 1491:    {
    #####: 1492:      state->coins += 2;
        -: 1493:    }
        1: 1494:    else if (state->hand[player][i] == gold)
        -: 1495:    {
    #####: 1496:      state->coins += 3;
        -: 1497:    }
        -: 1498:  }
        -: 1499:
        -: 1500:  //add bonus
        1: 1501:  state->coins += bonus;
        -: 1502:
        1: 1503:  return 0;
        -: 1504:}
        -: 1505:
        -: 1506://end of dominion.c
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void *a, const void *b)
        -:    9:{
       30:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       30:   12:  if (*(int *)a < *(int *)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
        1:   17:struct gameState *newGame()
        -:   18:{
        1:   19:  struct gameState *g = malloc(sizeof(struct gameState));
        1:   20:  return g;
        -:   21:}
        -:   22:
        1:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
        1:   26:  int *k = malloc(10 * sizeof(int));
        1:   27:  k[0] = k1;
        1:   28:  k[1] = k2;
        1:   29:  k[2] = k3;
        1:   30:  k[3] = k4;
        1:   31:  k[4] = k5;
        1:   32:  k[5] = k6;
        1:   33:  k[6] = k7;
        1:   34:  k[7] = k8;
        1:   35:  k[8] = k9;
        1:   36:  k[9] = k10;
        1:   37:  return k;
        -:   38:}
        -:   39:
        1:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        1:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       11:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      110:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       21:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      214:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      197:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
        3:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
    #####:  118:          if (numPlayers == 2)
        -:  119:          {
    #####:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
        3:  129:          state->supplyCount[i] = 10;
        -:  130:        }
        3:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      194:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        3:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
        8:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        -:  151:    }
       16:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        3:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        3:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       28:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
        6:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       20:  223:    card = floor(Random() * state->deckCount[player]);
       20:  224:    newDeck[newDeckPos] = state->deck[player][card];
       20:  225:    newDeckPos++;
       67:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
       47:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       20:  230:    state->deckCount[player]--;
        -:  231:  }
       22:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       20:  234:    state->deck[player][i] = newDeck[i];
       20:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        2:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        1:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        1:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        4:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        4:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        5:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
        5:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
        5:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
        5:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
        5:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
        5:  672:    state->deckCount[player]--;
        5:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
        5:  676:  return 0;
        -:  677:}
        -:  678:
        4:  679:int getCost(int cardNumber)
        -:  680:{
        4:  681:  switch (cardNumber)
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
        2:  691:  case copper:
        2:  692:    return 0;
        1:  693:  case silver:
        1:  694:    return 3;
        1:  695:  case gold:
        1:  696:    return 6;
    #####:  697:  case adventurer:
    #####:  698:    return 6;
    #####:  699:  case council_room:
    #####:  700:    return 5;
    #####:  701:  case feast:
    #####:  702:    return 4;
    #####:  703:  case gardens:
    #####:  704:    return 4;
    #####:  705:  case mine:
    #####:  706:    return 5;
    #####:  707:  case remodel:
    #####:  708:    return 4;
    #####:  709:  case smithy:
    #####:  710:    return 4;
    #####:  711:  case village:
    #####:  712:    return 3;
    #####:  713:  case baron:
    #####:  714:    return 4;
    #####:  715:  case great_hall:
    #####:  716:    return 3;
    #####:  717:  case minion:
    #####:  718:    return 5;
    #####:  719:  case steward:
    #####:  720:    return 3;
    #####:  721:  case tribute:
    #####:  722:    return 5;
    #####:  723:  case ambassador:
    #####:  724:    return 3;
    #####:  725:  case cutpurse:
    #####:  726:    return 4;
    #####:  727:  case embargo:
    #####:  728:    return 2;
    #####:  729:  case outpost:
    #####:  730:    return 5;
    #####:  731:  case salvager:
    #####:  732:    return 4;
    #####:  733:  case sea_hag:
    #####:  734:    return 4;
    #####:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int smithyEffect(int handPos, struct gameState *state)
        -:  743:{
    #####:  744:  int currentPlayer = whoseTurn(state);
        -:  745:  int i;
        -:  746:
        -:  747:  //+3 Cards
    #####:  748:  for (i = 0; i < 3; i++)
        -:  749:  {
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:  }
        -:  752:
        -:  753:  //discard card from hand
    #####:  754:  discardCard(handPos--, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int adventurerEffect(struct gameState *state)
        -:  759:{
    #####:  760:  int drawntreasure = 0;
    #####:  761:  int currentPlayer = whoseTurn(state);
        -:  762:  int cardDrawn;
        -:  763:  int temphand[MAX_HAND];
    #####:  764:  int z = 0;
        -:  765:
    #####:  766:  while (drawntreasure < 2)
        -:  767:  {
    #####:  768:    if (state->deckCount[currentPlayer] < 1)
        -:  769:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  770:      shuffle(currentPlayer, state);
        -:  771:    }
    #####:  772:    drawCard(currentPlayer, state);
    #####:  773:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####:  774:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  775:      drawntreasure++;
        -:  776:    else
        -:  777:    {
    #####:  778:      temphand[z] = cardDrawn;
    #####:  779:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  780:      z++;
        -:  781:    }
        -:  782:  }
    #####:  783:  while (z - 1 >= 0)
        -:  784:  {
    #####:  785:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  786:    z = z - 1;
        -:  787:  }
    #####:  788:  return 0;
        -:  789:}
        -:  790:
    #####:  791:int villageEffect(int handPos, struct gameState *state)
        -:  792:{
    #####:  793:  int currentPlayer = whoseTurn(state);
        -:  794:
        -:  795:  //+1 Card
    #####:  796:  drawCard(currentPlayer, state);
        -:  797:
        -:  798:  //+2 Actions
    #####:  799:  state->numActions = state->numActions + 2;
        -:  800:
        -:  801:  //discard played card from hand
    #####:  802:  discardCard(handPos, currentPlayer, state, 0);
    #####:  803:  return 0;
        -:  804:}
        -:  805:
    #####:  806:int greathallEffect(int handPos, struct gameState *state)
        -:  807:{
    #####:  808:  int currentPlayer = whoseTurn(state);
        -:  809:  //printf("prev state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
        -:  810:  //+1 Card
    #####:  811:  drawCard(currentPlayer, state);
        -:  812:
        -:  813:  //+1 Actions
    #####:  814:  state->numActions++;
        -:  815:
        -:  816:  //discard card from hand
    #####:  817:  discardCard(handPos, currentPlayer, state, 0);
        -:  818:  // printf("post state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
    #####:  819:  return 0;
        -:  820:}
        -:  821:
    #####:  822:int councilroomEffect(int handPos, struct gameState *state)
        -:  823:{
        -:  824:  int i;
    #####:  825:  int currentPlayer = whoseTurn(state);
        -:  826:  //+4 Cards
    #####:  827:  for (i = 0; i < 4; i++)
        -:  828:  {
    #####:  829:    drawCard(currentPlayer, state);
        -:  830:  }
        -:  831:
        -:  832:  //+1 Buy
    #####:  833:  state->numBuys++;
        -:  834:
        -:  835:  //Each other player draws a card
    #####:  836:  for (i = 0; i < state->numPlayers; i++)
        -:  837:  {
    #####:  838:    if (i != currentPlayer)
        -:  839:    {
    #####:  840:      drawCard(i, state);
        -:  841:    }
        -:  842:  }
        -:  843:
        -:  844:  //put played card in played card pile
    #####:  845:  discardCard(handPos, currentPlayer, state, 0);
        -:  846:
    #####:  847:  return 0;
        -:  848:}
        -:  849:
        4:  850:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  851:{
        -:  852:  int i;
        -:  853:  int j;
        -:  854:  int k;
        -:  855:  int x;
        -:  856:  int index;
        4:  857:  int currentPlayer = whoseTurn(state);
        4:  858:  int nextPlayer = currentPlayer + 1;
        -:  859:
        4:  860:  int tributeRevealedCards[2] = {-1, -1};
        -:  861:  int temphand[MAX_HAND]; // moved above the if statement
        4:  862:  int drawntreasure = 0;
        -:  863:  int cardDrawn;
        4:  864:  int z = 0; // this is the counter for the temp hand
        4:  865:  if (nextPlayer > (state->numPlayers - 1))
        -:  866:  {
    #####:  867:    nextPlayer = 0;
        -:  868:  }
        4:  869:  if (card == great_hall)
        -:  870:  {
    #####:  871:    printf("great_hall\n");
        -:  872:  }
        -:  873:  //uses switch to select card and perform actions
        4:  874:  switch (card)
        -:  875:  {
    #####:  876:  case adventurer:
    #####:  877:    return adventurerEffect(state);
        -:  878:
    #####:  879:  case council_room:
    #####:  880:    return councilroomEffect(handPos, state);
        -:  881:
    #####:  882:  case feast:
        -:  883:    //gain card with cost up to 5
        -:  884:    //Backup hand
    #####:  885:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  886:    {
    #####:  887:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  888:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  889:    }
        -:  890:    //Backup hand
        -:  891:
        -:  892:    //Update Coins for Buy
    #####:  893:    updateCoins(currentPlayer, state, 5);
    #####:  894:    x = 1; //Condition to loop on
    #####:  895:    while (x == 1)
        -:  896:    { //Buy one card
    #####:  897:      if (supplyCount(choice1, state) <= 0)
        -:  898:      {
        -:  899:        if (DEBUG)
        -:  900:          printf("None of that card left, sorry!\n");
        -:  901:
        -:  902:        if (DEBUG)
        -:  903:        {
        -:  904:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  905:        }
        -:  906:      }
    #####:  907:      else if (state->coins < getCost(choice1))
        -:  908:      {
    #####:  909:        printf("That card is too expensive!\n");
        -:  910:
        -:  911:        if (DEBUG)
        -:  912:        {
        -:  913:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  914:        }
        -:  915:      }
        -:  916:      else
        -:  917:      {
        -:  918:
        -:  919:        if (DEBUG)
        -:  920:        {
        -:  921:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:        }
        -:  923:
    #####:  924:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  925:        x = 0;                                      //No more buying cards
        -:  926:
        -:  927:        if (DEBUG)
        -:  928:        {
        -:  929:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:        }
        -:  931:      }
        -:  932:    }
        -:  933:
        -:  934:    //Reset Hand
    #####:  935:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  936:    {
    #####:  937:      state->hand[currentPlayer][i] = temphand[i];
    #####:  938:      temphand[i] = -1;
        -:  939:    }
        -:  940:    //Reset Hand
        -:  941:
    #####:  942:    return 0;
        -:  943:
    #####:  944:  case gardens:
    #####:  945:    return -1;
        -:  946:
        4:  947:  case mine:
        4:  948:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  949:
        4:  950:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  951:    {
        2:  952:      return -1;
        -:  953:    }
        -:  954:
        2:  955:    if (choice2 > treasure_map || choice2 < curse)
        -:  956:    {
    #####:  957:      return -1;
        -:  958:    }
        -:  959:
        2:  960:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  961:    {
        1:  962:      return -1;
        -:  963:    }
        -:  964:
        1:  965:    gainCard(choice2, state, 2, currentPlayer);
        -:  966:
        -:  967:    //discard card from hand
        1:  968:    discardCard(handPos, currentPlayer, state, 0);
        -:  969:
        -:  970:    //discard trashed card
        5:  971:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  972:    {
        5:  973:      if (state->hand[currentPlayer][i] == j)
        -:  974:      {
        1:  975:        discardCard(i, currentPlayer, state, 0);
        1:  976:        break;
        -:  977:      }
        -:  978:    }
        -:  979:
        1:  980:    return 0;
        -:  981:
    #####:  982:  case remodel:
    #####:  983:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  984:
    #####:  985:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  986:    {
    #####:  987:      return -1;
        -:  988:    }
        -:  989:
    #####:  990:    gainCard(choice2, state, 0, currentPlayer);
        -:  991:
        -:  992:    //discard card from hand
    #####:  993:    discardCard(handPos, currentPlayer, state, 0);
        -:  994:
        -:  995:    //discard trashed card
    #####:  996:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  997:    {
    #####:  998:      if (state->hand[currentPlayer][i] == j)
        -:  999:      {
    #####: 1000:        discardCard(i, currentPlayer, state, 0);
    #####: 1001:        break;
        -: 1002:      }
        -: 1003:    }
        -: 1004:
    #####: 1005:    return 0;
        -: 1006:
    #####: 1007:  case smithy:
    #####: 1008:    return smithyEffect(handPos, state);
        -: 1009:
    #####: 1010:  case village:
    #####: 1011:    return villageEffect(handPos, state);
        -: 1012:
    #####: 1013:  case baron:
    #####: 1014:    state->numBuys++; //Increase buys by 1!
    #####: 1015:    if (choice1 > 0)
        -: 1016:    {                             //Boolean true or going to discard an estate
    #####: 1017:      int p = 0;                  //Iterator for hand!
    #####: 1018:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1019:      while (card_not_discarded)
        -: 1020:      {
    #####: 1021:        if (state->hand[currentPlayer][p] == estate)
        -: 1022:        {                    //Found an estate card!
    #####: 1023:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1024:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1025:          state->discardCount[currentPlayer]++;
    #####: 1026:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1027:          {
    #####: 1028:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1029:          }
    #####: 1030:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1031:          state->handCount[currentPlayer]--;
    #####: 1032:          card_not_discarded = 0; //Exit the loop
        -: 1033:        }
    #####: 1034:        else if (p > state->handCount[currentPlayer])
        -: 1035:        {
        -: 1036:          if (DEBUG)
        -: 1037:          {
        -: 1038:            printf("No estate cards in your hand, invalid choice\n");
        -: 1039:            printf("Must gain an estate if there are any\n");
        -: 1040:          }
    #####: 1041:          if (supplyCount(estate, state) > 0)
        -: 1042:          {
    #####: 1043:            gainCard(estate, state, 0, currentPlayer);
    #####: 1044:            state->supplyCount[estate]--; //Decrement estates
    #####: 1045:            if (supplyCount(estate, state) == 0)
        -: 1046:            {
    #####: 1047:              isGameOver(state);
        -: 1048:            }
        -: 1049:          }
    #####: 1050:          card_not_discarded = 0; //Exit the loop
        -: 1051:        }
        -: 1052:
        -: 1053:        else
        -: 1054:        {
    #####: 1055:          p++; //Next card
        -: 1056:        }
        -: 1057:      }
        -: 1058:    }
        -: 1059:
        -: 1060:    else
        -: 1061:    {
    #####: 1062:      if (supplyCount(estate, state) > 0)
        -: 1063:      {
    #####: 1064:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1065:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1066:        if (supplyCount(estate, state) == 0)
        -: 1067:        {
    #####: 1068:          isGameOver(state);
        -: 1069:        }
        -: 1070:      }
        -: 1071:    }
        -: 1072:
    #####: 1073:    return 0;
        -: 1074:
    #####: 1075:  case great_hall:
    #####: 1076:    return greathallEffect(handPos, state);
        -: 1077:
    #####: 1078:  case minion:
        -: 1079:    //+1 action
    #####: 1080:    state->numActions++;
        -: 1081:
        -: 1082:    //discard card from hand
    #####: 1083:    discardCard(handPos, currentPlayer, state, 0);
        -: 1084:
    #####: 1085:    if (choice1) //+2 coins
        -: 1086:    {
    #####: 1087:      state->coins = state->coins + 2;
        -: 1088:    }
        -: 1089:
    #####: 1090:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1091:    {
        -: 1092:      //discard hand
    #####: 1093:      while (numHandCards(state) > 0)
        -: 1094:      {
    #####: 1095:        discardCard(handPos, currentPlayer, state, 0);
        -: 1096:      }
        -: 1097:
        -: 1098:      //draw 4
    #####: 1099:      for (i = 0; i < 4; i++)
        -: 1100:      {
    #####: 1101:        drawCard(currentPlayer, state);
        -: 1102:      }
        -: 1103:
        -: 1104:      //other players discard hand and redraw if hand size > 4
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
        -: 1106:      {
    #####: 1107:        if (i != currentPlayer)
        -: 1108:        {
    #####: 1109:          if (state->handCount[i] > 4)
        -: 1110:          {
        -: 1111:            //discard hand
    #####: 1112:            while (state->handCount[i] > 0)
        -: 1113:            {
    #####: 1114:              discardCard(handPos, i, state, 0);
        -: 1115:            }
        -: 1116:
        -: 1117:            //draw 4
    #####: 1118:            for (j = 0; j < 4; j++)
        -: 1119:            {
    #####: 1120:              drawCard(i, state);
        -: 1121:            }
        -: 1122:          }
        -: 1123:        }
        -: 1124:      }
        -: 1125:    }
    #####: 1126:    return 0;
        -: 1127:
    #####: 1128:  case steward:
    #####: 1129:    if (choice1 == 1)
        -: 1130:    {
        -: 1131:      //+2 cards
    #####: 1132:      drawCard(currentPlayer, state);
    #####: 1133:      drawCard(currentPlayer, state);
        -: 1134:    }
    #####: 1135:    else if (choice1 == 2)
        -: 1136:    {
        -: 1137:      //+2 coins
    #####: 1138:      state->coins = state->coins + 2;
        -: 1139:    }
        -: 1140:    else
        -: 1141:    {
        -: 1142:      //trash 2 cards in hand
    #####: 1143:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:      discardCard(choice3, currentPlayer, state, 1);
        -: 1145:    }
        -: 1146:
        -: 1147:    //discard card from hand
    #####: 1148:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:    return 0;
        -: 1150:
    #####: 1151:  case tribute:
    #####: 1152:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1153:    {
    #####: 1154:      if (state->deckCount[nextPlayer] > 0)
        -: 1155:      {
    #####: 1156:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1157:        state->deckCount[nextPlayer]--;
        -: 1158:      }
    #####: 1159:      else if (state->discardCount[nextPlayer] > 0)
        -: 1160:      {
    #####: 1161:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1162:        state->discardCount[nextPlayer]--;
        -: 1163:      }
        -: 1164:      else
        -: 1165:      {
        -: 1166:        //No Card to Reveal
        -: 1167:        if (DEBUG)
        -: 1168:        {
        -: 1169:          printf("No cards to reveal\n");
        -: 1170:        }
        -: 1171:      }
        -: 1172:    }
        -: 1173:
        -: 1174:    else
        -: 1175:    {
    #####: 1176:      if (state->deckCount[nextPlayer] == 0)
        -: 1177:      {
    #####: 1178:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1179:        {
    #####: 1180:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1181:          state->deckCount[nextPlayer]++;
    #####: 1182:          state->discard[nextPlayer][i] = -1;
    #####: 1183:          state->discardCount[nextPlayer]--;
        -: 1184:        }
        -: 1185:
    #####: 1186:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1187:      }
    #####: 1188:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1189:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:      state->deckCount[nextPlayer]--;
    #####: 1191:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1192:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:      state->deckCount[nextPlayer]--;
        -: 1194:    }
        -: 1195:
    #####: 1196:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1197:    { //If we have a duplicate card, just drop one
    #####: 1198:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1199:      state->playedCardCount++;
    #####: 1200:      tributeRevealedCards[1] = -1;
        -: 1201:    }
        -: 1202:
    #####: 1203:    for (i = 0; i <= 2; i++)
        -: 1204:    {
    #####: 1205:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1206:      { //Treasure cards
    #####: 1207:        state->coins += 2;
        -: 1208:      }
        -: 1209:
    #####: 1210:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1211:      { //Victory Card Found
    #####: 1212:        drawCard(currentPlayer, state);
    #####: 1213:        drawCard(currentPlayer, state);
        -: 1214:      }
        -: 1215:      else
        -: 1216:      { //Action Card
    #####: 1217:        state->numActions = state->numActions + 2;
        -: 1218:      }
        -: 1219:    }
        -: 1220:
    #####: 1221:    return 0;
        -: 1222:
    #####: 1223:  case ambassador:
    #####: 1224:    j = 0; //used to check if player has enough cards to discard
        -: 1225:
    #####: 1226:    if (choice2 > 2 || choice2 < 0)
        -: 1227:    {
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:    if (choice1 == handPos)
        -: 1232:    {
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:
    #####: 1236:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:    {
    #####: 1238:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1239:      {
    #####: 1240:        j++;
        -: 1241:      }
        -: 1242:    }
    #####: 1243:    if (j < choice2)
        -: 1244:    {
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:
        -: 1248:    if (DEBUG)
        -: 1249:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1250:
        -: 1251:    //increase supply count for choosen card by amount being discarded
    #####: 1252:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1253:
        -: 1254:    //each other player gains a copy of revealed card
    #####: 1255:    for (i = 0; i < state->numPlayers; i++)
        -: 1256:    {
    #####: 1257:      if (i != currentPlayer)
        -: 1258:      {
    #####: 1259:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1260:      }
        -: 1261:    }
        -: 1262:
        -: 1263:    //discard played card from hand
    #####: 1264:    discardCard(handPos, currentPlayer, state, 0);
        -: 1265:
        -: 1266:    //trash copies of cards returned to supply
    #####: 1267:    for (j = 0; j < choice2; j++)
        -: 1268:    {
    #####: 1269:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:      {
    #####: 1271:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1272:        {
    #####: 1273:          discardCard(i, currentPlayer, state, 1);
    #####: 1274:          break;
        -: 1275:        }
        -: 1276:      }
        -: 1277:    }
        -: 1278:
    #####: 1279:    return 0;
        -: 1280:
    #####: 1281:  case cutpurse:
        -: 1282:
    #####: 1283:    updateCoins(currentPlayer, state, 2);
    #####: 1284:    for (i = 0; i < state->numPlayers; i++)
        -: 1285:    {
    #####: 1286:      if (i != currentPlayer)
        -: 1287:      {
    #####: 1288:        for (j = 0; j < state->handCount[i]; j++)
        -: 1289:        {
    #####: 1290:          if (state->hand[i][j] == copper)
        -: 1291:          {
    #####: 1292:            discardCard(j, i, state, 0);
    #####: 1293:            break;
        -: 1294:          }
    #####: 1295:          if (j == state->handCount[i])
        -: 1296:          {
    #####: 1297:            for (k = 0; k < state->handCount[i]; k++)
        -: 1298:            {
        -: 1299:              if (DEBUG)
        -: 1300:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1301:            }
    #####: 1302:            break;
        -: 1303:          }
        -: 1304:        }
        -: 1305:      }
        -: 1306:    }
        -: 1307:
        -: 1308:    //discard played card from hand
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0);
        -: 1310:
    #####: 1311:    return 0;
        -: 1312:
    #####: 1313:  case embargo:
        -: 1314:    //+2 Coins
    #####: 1315:    state->coins = state->coins + 2;
        -: 1316:
        -: 1317:    //see if selected pile is in play
    #####: 1318:    if (state->supplyCount[choice1] == -1)
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:    //add embargo token to selected supply pile
    #####: 1324:    state->embargoTokens[choice1]++;
        -: 1325:
        -: 1326:    //trash card
    #####: 1327:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1328:    return 0;
        -: 1329:
    #####: 1330:  case outpost:
        -: 1331:    //set outpost flag
    #####: 1332:    state->outpostPlayed++;
        -: 1333:
        -: 1334:    //discard card
    #####: 1335:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:    return 0;
        -: 1337:
    #####: 1338:  case salvager:
        -: 1339:    //+1 buy
    #####: 1340:    state->numBuys++;
        -: 1341:
    #####: 1342:    if (choice1)
        -: 1343:    {
        -: 1344:      //gain coins equal to trashed card
    #####: 1345:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1346:      //trash card
    #####: 1347:      discardCard(choice1, currentPlayer, state, 1);
        -: 1348:    }
        -: 1349:
        -: 1350:    //discard card
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1352:    return 0;
        -: 1353:
    #####: 1354:  case sea_hag:
    #####: 1355:    for (i = 0; i < state->numPlayers; i++)
        -: 1356:    {
    #####: 1357:      if (i != currentPlayer)
        -: 1358:      {
    #####: 1359:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1360:        state->deckCount[i]--;
    #####: 1361:        state->discardCount[i]++;
    #####: 1362:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1363:      }
        -: 1364:    }
    #####: 1365:    return 0;
        -: 1366:
    #####: 1367:  case treasure_map:
        -: 1368:    //search hand for another treasure_map
    #####: 1369:    index = -1;
    #####: 1370:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1371:    {
    #####: 1372:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1373:      {
    #####: 1374:        index = i;
    #####: 1375:        break;
        -: 1376:      }
        -: 1377:    }
    #####: 1378:    if (index > -1)
        -: 1379:    {
        -: 1380:      //trash both treasure cards
    #####: 1381:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1382:      discardCard(index, currentPlayer, state, 1);
        -: 1383:
        -: 1384:      //gain 4 Gold cards
    #####: 1385:      for (i = 0; i < 4; i++)
        -: 1386:      {
    #####: 1387:        gainCard(gold, state, 1, currentPlayer);
        -: 1388:      }
        -: 1389:
        -: 1390:      //return success
    #####: 1391:      return 1;
        -: 1392:    }
        -: 1393:
        -: 1394:    //no second treasure_map found in hand
    #####: 1395:    return -1;
        -: 1396:  }
        -: 1397:
    #####: 1398:  return -1;
        -: 1399:}
        -: 1400:
        2: 1401:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1402:{
        -: 1403:
        -: 1404:  //if card is not trashed, added to Played pile
        2: 1405:  if (trashFlag < 1)
        -: 1406:  {
        -: 1407:    //add card to played pile
        2: 1408:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1409:    state->playedCardCount++;
        -: 1410:  }
        -: 1411:
        -: 1412:  //set played card to -1
        2: 1413:  state->hand[currentPlayer][handPos] = -1;
        -: 1414:
        -: 1415:  //remove card from player's hand
        2: 1416:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1417:  {
        -: 1418:    //reduce number of cards in hand
        1: 1419:    state->handCount[currentPlayer]--;
        -: 1420:  }
        1: 1421:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1422:  {
        -: 1423:    //reduce number of cards in hand
    #####: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:  else
        -: 1427:  {
        -: 1428:    //replace discarded card with last card in hand
        1: 1429:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1430:    //set last card to -1
        1: 1431:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1432:    //reduce number of cards in hand
        1: 1433:    state->handCount[currentPlayer]--;
        -: 1434:  }
        -: 1435:
        2: 1436:  return 0;
        -: 1437:}
        -: 1438:
        1: 1439:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1440:{
        -: 1441:  //Note: supplyPos is enum of choosen card
        -: 1442:
        -: 1443:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1444:  if (supplyCount(supplyPos, state) < 1)
        -: 1445:  {
    #####: 1446:    return -1;
        -: 1447:  }
        -: 1448:
        -: 1449:  //added card for [whoseTurn] current player:
        -: 1450:  // toFlag = 0 : add to discard
        -: 1451:  // toFlag = 1 : add to deck
        -: 1452:  // toFlag = 2 : add to hand
        -: 1453:
        1: 1454:  if (toFlag == 1)
        -: 1455:  {
    #####: 1456:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1457:    state->deckCount[player]++;
        -: 1458:  }
        1: 1459:  else if (toFlag == 2)
        -: 1460:  {
        1: 1461:    state->hand[player][state->handCount[player]] = supplyPos;
        1: 1462:    state->handCount[player]++;
        -: 1463:  }
        -: 1464:  else
        -: 1465:  {
    #####: 1466:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1467:    state->discardCount[player]++;
        -: 1468:  }
        -: 1469:
        -: 1470:  //decrease number in supply pile
        1: 1471:  state->supplyCount[supplyPos]--;
        -: 1472:
        1: 1473:  return 0;
        -: 1474:}
        -: 1475:
        1: 1476:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1477:{
        -: 1478:  int i;
        -: 1479:
        -: 1480:  //reset coin count
        1: 1481:  state->coins = 0;
        -: 1482:
        -: 1483:  //add coins for each Treasure card in player's hand
        6: 1484:  for (i = 0; i < state->handCount[player]; i++)
        -: 1485:  {
        5: 1486:    if (state->hand[player][i] == copper)
        -: 1487:    {
        4: 1488:      state->coins += 1;
        -: 1489:    }
        1: 1490:    else if (state->hand[player][i] == silver)
        -: 1491:    {
    #####: 1492:      state->coins += 2;
        -: 1493:    }
        1: 1494:    else if (state->hand[player][i] == gold)
        -: 1495:    {
    #####: 1496:      state->coins += 3;
        -: 1497:    }
        -: 1498:  }
        -: 1499:
        -: 1500:  //add bonus
        1: 1501:  state->coins += bonus;
        -: 1502:
        1: 1503:  return 0;
        -: 1504:}
        -: 1505:
        -: 1506://end of dominion.c
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void *a, const void *b)
        -:    9:{
       30:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       30:   12:  if (*(int *)a < *(int *)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
        1:   17:struct gameState *newGame()
        -:   18:{
        1:   19:  struct gameState *g = malloc(sizeof(struct gameState));
        1:   20:  return g;
        -:   21:}
        -:   22:
        1:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
        1:   26:  int *k = malloc(10 * sizeof(int));
        1:   27:  k[0] = k1;
        1:   28:  k[1] = k2;
        1:   29:  k[2] = k3;
        1:   30:  k[3] = k4;
        1:   31:  k[4] = k5;
        1:   32:  k[5] = k6;
        1:   33:  k[6] = k7;
        1:   34:  k[7] = k8;
        1:   35:  k[8] = k9;
        1:   36:  k[9] = k10;
        1:   37:  return k;
        -:   38:}
        -:   39:
        1:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        1:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       11:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      110:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       21:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      214:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      197:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
        3:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
    #####:  118:          if (numPlayers == 2)
        -:  119:          {
    #####:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
        3:  129:          state->supplyCount[i] = 10;
        -:  130:        }
        3:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      194:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        3:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
        8:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        -:  151:    }
       16:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        3:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        3:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       28:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
        6:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       20:  223:    card = floor(Random() * state->deckCount[player]);
       20:  224:    newDeck[newDeckPos] = state->deck[player][card];
       20:  225:    newDeckPos++;
       67:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
       47:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       20:  230:    state->deckCount[player]--;
        -:  231:  }
       22:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       20:  234:    state->deck[player][i] = newDeck[i];
       20:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        2:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        1:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        1:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        4:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        4:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        5:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
        5:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
        5:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
        5:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
        5:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
        5:  672:    state->deckCount[player]--;
        5:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
        5:  676:  return 0;
        -:  677:}
        -:  678:
        4:  679:int getCost(int cardNumber)
        -:  680:{
        4:  681:  switch (cardNumber)
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
        2:  691:  case copper:
        2:  692:    return 0;
        1:  693:  case silver:
        1:  694:    return 3;
        1:  695:  case gold:
        1:  696:    return 6;
    #####:  697:  case adventurer:
    #####:  698:    return 6;
    #####:  699:  case council_room:
    #####:  700:    return 5;
    #####:  701:  case feast:
    #####:  702:    return 4;
    #####:  703:  case gardens:
    #####:  704:    return 4;
    #####:  705:  case mine:
    #####:  706:    return 5;
    #####:  707:  case remodel:
    #####:  708:    return 4;
    #####:  709:  case smithy:
    #####:  710:    return 4;
    #####:  711:  case village:
    #####:  712:    return 3;
    #####:  713:  case baron:
    #####:  714:    return 4;
    #####:  715:  case great_hall:
    #####:  716:    return 3;
    #####:  717:  case minion:
    #####:  718:    return 5;
    #####:  719:  case steward:
    #####:  720:    return 3;
    #####:  721:  case tribute:
    #####:  722:    return 5;
    #####:  723:  case ambassador:
    #####:  724:    return 3;
    #####:  725:  case cutpurse:
    #####:  726:    return 4;
    #####:  727:  case embargo:
    #####:  728:    return 2;
    #####:  729:  case outpost:
    #####:  730:    return 5;
    #####:  731:  case salvager:
    #####:  732:    return 4;
    #####:  733:  case sea_hag:
    #####:  734:    return 4;
    #####:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int smithyEffect(int handPos, struct gameState *state)
        -:  743:{
    #####:  744:  int currentPlayer = whoseTurn(state);
        -:  745:  int i;
        -:  746:
        -:  747:  //+3 Cards
    #####:  748:  for (i = 0; i < 3; i++)
        -:  749:  {
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:  }
        -:  752:
        -:  753:  //discard card from hand
    #####:  754:  discardCard(handPos--, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int adventurerEffect(struct gameState *state)
        -:  759:{
    #####:  760:  int drawntreasure = 0;
    #####:  761:  int currentPlayer = whoseTurn(state);
        -:  762:  int cardDrawn;
        -:  763:  int temphand[MAX_HAND];
    #####:  764:  int z = 0;
        -:  765:
    #####:  766:  while (drawntreasure < 2)
        -:  767:  {
    #####:  768:    if (state->deckCount[currentPlayer] < 1)
        -:  769:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  770:      shuffle(currentPlayer, state);
        -:  771:    }
    #####:  772:    drawCard(currentPlayer, state);
    #####:  773:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####:  774:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  775:      drawntreasure++;
        -:  776:    else
        -:  777:    {
    #####:  778:      temphand[z] = cardDrawn;
    #####:  779:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  780:      z++;
        -:  781:    }
        -:  782:  }
    #####:  783:  while (z - 1 >= 0)
        -:  784:  {
    #####:  785:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  786:    z = z - 1;
        -:  787:  }
    #####:  788:  return 0;
        -:  789:}
        -:  790:
    #####:  791:int villageEffect(int handPos, struct gameState *state)
        -:  792:{
    #####:  793:  int currentPlayer = whoseTurn(state);
        -:  794:
        -:  795:  //+1 Card
    #####:  796:  drawCard(currentPlayer, state);
        -:  797:
        -:  798:  //+2 Actions
    #####:  799:  state->numActions = state->numActions + 2;
        -:  800:
        -:  801:  //discard played card from hand
    #####:  802:  discardCard(handPos, currentPlayer, state, 0);
    #####:  803:  return 0;
        -:  804:}
        -:  805:
    #####:  806:int greathallEffect(int handPos, struct gameState *state)
        -:  807:{
    #####:  808:  int currentPlayer = whoseTurn(state);
        -:  809:  //printf("prev state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
        -:  810:  //+1 Card
    #####:  811:  drawCard(currentPlayer, state);
        -:  812:
        -:  813:  //+1 Actions
    #####:  814:  state->numActions++;
        -:  815:
        -:  816:  //discard card from hand
    #####:  817:  discardCard(handPos, currentPlayer, state, 0);
        -:  818:  // printf("post state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
    #####:  819:  return 0;
        -:  820:}
        -:  821:
    #####:  822:int councilroomEffect(int handPos, struct gameState *state)
        -:  823:{
        -:  824:  int i;
    #####:  825:  int currentPlayer = whoseTurn(state);
        -:  826:  //+4 Cards
    #####:  827:  for (i = 0; i < 4; i++)
        -:  828:  {
    #####:  829:    drawCard(currentPlayer, state);
        -:  830:  }
        -:  831:
        -:  832:  //+1 Buy
    #####:  833:  state->numBuys++;
        -:  834:
        -:  835:  //Each other player draws a card
    #####:  836:  for (i = 0; i < state->numPlayers; i++)
        -:  837:  {
    #####:  838:    if (i != currentPlayer)
        -:  839:    {
    #####:  840:      drawCard(i, state);
        -:  841:    }
        -:  842:  }
        -:  843:
        -:  844:  //put played card in played card pile
    #####:  845:  discardCard(handPos, currentPlayer, state, 0);
        -:  846:
    #####:  847:  return 0;
        -:  848:}
        -:  849:
        4:  850:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  851:{
        -:  852:  int i;
        -:  853:  int j;
        -:  854:  int k;
        -:  855:  int x;
        -:  856:  int index;
        4:  857:  int currentPlayer = whoseTurn(state);
        4:  858:  int nextPlayer = currentPlayer + 1;
        -:  859:
        4:  860:  int tributeRevealedCards[2] = {-1, -1};
        -:  861:  int temphand[MAX_HAND]; // moved above the if statement
        4:  862:  int drawntreasure = 0;
        -:  863:  int cardDrawn;
        4:  864:  int z = 0; // this is the counter for the temp hand
        4:  865:  if (nextPlayer > (state->numPlayers - 1))
        -:  866:  {
    #####:  867:    nextPlayer = 0;
        -:  868:  }
        4:  869:  if (card == great_hall)
        -:  870:  {
    #####:  871:    printf("great_hall\n");
        -:  872:  }
        -:  873:  //uses switch to select card and perform actions
        4:  874:  switch (card)
        -:  875:  {
    #####:  876:  case adventurer:
    #####:  877:    return adventurerEffect(state);
        -:  878:
    #####:  879:  case council_room:
    #####:  880:    return councilroomEffect(handPos, state);
        -:  881:
    #####:  882:  case feast:
        -:  883:    //gain card with cost up to 5
        -:  884:    //Backup hand
    #####:  885:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  886:    {
    #####:  887:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  888:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  889:    }
        -:  890:    //Backup hand
        -:  891:
        -:  892:    //Update Coins for Buy
    #####:  893:    updateCoins(currentPlayer, state, 5);
    #####:  894:    x = 1; //Condition to loop on
    #####:  895:    while (x == 1)
        -:  896:    { //Buy one card
    #####:  897:      if (supplyCount(choice1, state) <= 0)
        -:  898:      {
        -:  899:        if (DEBUG)
        -:  900:          printf("None of that card left, sorry!\n");
        -:  901:
        -:  902:        if (DEBUG)
        -:  903:        {
        -:  904:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  905:        }
        -:  906:      }
    #####:  907:      else if (state->coins < getCost(choice1))
        -:  908:      {
    #####:  909:        printf("That card is too expensive!\n");
        -:  910:
        -:  911:        if (DEBUG)
        -:  912:        {
        -:  913:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  914:        }
        -:  915:      }
        -:  916:      else
        -:  917:      {
        -:  918:
        -:  919:        if (DEBUG)
        -:  920:        {
        -:  921:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:        }
        -:  923:
    #####:  924:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  925:        x = 0;                                      //No more buying cards
        -:  926:
        -:  927:        if (DEBUG)
        -:  928:        {
        -:  929:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:        }
        -:  931:      }
        -:  932:    }
        -:  933:
        -:  934:    //Reset Hand
    #####:  935:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  936:    {
    #####:  937:      state->hand[currentPlayer][i] = temphand[i];
    #####:  938:      temphand[i] = -1;
        -:  939:    }
        -:  940:    //Reset Hand
        -:  941:
    #####:  942:    return 0;
        -:  943:
    #####:  944:  case gardens:
    #####:  945:    return -1;
        -:  946:
        4:  947:  case mine:
        4:  948:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  949:
        4:  950:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  951:    {
        2:  952:      return -1;
        -:  953:    }
        -:  954:
        2:  955:    if (choice2 > treasure_map || choice2 < curse)
        -:  956:    {
    #####:  957:      return -1;
        -:  958:    }
        -:  959:
        2:  960:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  961:    {
        1:  962:      return -1;
        -:  963:    }
        -:  964:
        1:  965:    gainCard(choice2, state, 2, currentPlayer);
        -:  966:
        -:  967:    //discard card from hand
        1:  968:    discardCard(handPos, currentPlayer, state, 0);
        -:  969:
        -:  970:    //discard trashed card
        5:  971:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  972:    {
        5:  973:      if (state->hand[currentPlayer][i] == j)
        -:  974:      {
        1:  975:        discardCard(i, currentPlayer, state, 0);
        1:  976:        break;
        -:  977:      }
        -:  978:    }
        -:  979:
        1:  980:    return 0;
        -:  981:
    #####:  982:  case remodel:
    #####:  983:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  984:
    #####:  985:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  986:    {
    #####:  987:      return -1;
        -:  988:    }
        -:  989:
    #####:  990:    gainCard(choice2, state, 0, currentPlayer);
        -:  991:
        -:  992:    //discard card from hand
    #####:  993:    discardCard(handPos, currentPlayer, state, 0);
        -:  994:
        -:  995:    //discard trashed card
    #####:  996:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  997:    {
    #####:  998:      if (state->hand[currentPlayer][i] == j)
        -:  999:      {
    #####: 1000:        discardCard(i, currentPlayer, state, 0);
    #####: 1001:        break;
        -: 1002:      }
        -: 1003:    }
        -: 1004:
    #####: 1005:    return 0;
        -: 1006:
    #####: 1007:  case smithy:
    #####: 1008:    return smithyEffect(handPos, state);
        -: 1009:
    #####: 1010:  case village:
    #####: 1011:    return villageEffect(handPos, state);
        -: 1012:
    #####: 1013:  case baron:
    #####: 1014:    state->numBuys++; //Increase buys by 1!
    #####: 1015:    if (choice1 > 0)
        -: 1016:    {                             //Boolean true or going to discard an estate
    #####: 1017:      int p = 0;                  //Iterator for hand!
    #####: 1018:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1019:      while (card_not_discarded)
        -: 1020:      {
    #####: 1021:        if (state->hand[currentPlayer][p] == estate)
        -: 1022:        {                    //Found an estate card!
    #####: 1023:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1024:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1025:          state->discardCount[currentPlayer]++;
    #####: 1026:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1027:          {
    #####: 1028:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1029:          }
    #####: 1030:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1031:          state->handCount[currentPlayer]--;
    #####: 1032:          card_not_discarded = 0; //Exit the loop
        -: 1033:        }
    #####: 1034:        else if (p > state->handCount[currentPlayer])
        -: 1035:        {
        -: 1036:          if (DEBUG)
        -: 1037:          {
        -: 1038:            printf("No estate cards in your hand, invalid choice\n");
        -: 1039:            printf("Must gain an estate if there are any\n");
        -: 1040:          }
    #####: 1041:          if (supplyCount(estate, state) > 0)
        -: 1042:          {
    #####: 1043:            gainCard(estate, state, 0, currentPlayer);
    #####: 1044:            state->supplyCount[estate]--; //Decrement estates
    #####: 1045:            if (supplyCount(estate, state) == 0)
        -: 1046:            {
    #####: 1047:              isGameOver(state);
        -: 1048:            }
        -: 1049:          }
    #####: 1050:          card_not_discarded = 0; //Exit the loop
        -: 1051:        }
        -: 1052:
        -: 1053:        else
        -: 1054:        {
    #####: 1055:          p++; //Next card
        -: 1056:        }
        -: 1057:      }
        -: 1058:    }
        -: 1059:
        -: 1060:    else
        -: 1061:    {
    #####: 1062:      if (supplyCount(estate, state) > 0)
        -: 1063:      {
    #####: 1064:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1065:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1066:        if (supplyCount(estate, state) == 0)
        -: 1067:        {
    #####: 1068:          isGameOver(state);
        -: 1069:        }
        -: 1070:      }
        -: 1071:    }
        -: 1072:
    #####: 1073:    return 0;
        -: 1074:
    #####: 1075:  case great_hall:
    #####: 1076:    return greathallEffect(handPos, state);
        -: 1077:
    #####: 1078:  case minion:
        -: 1079:    //+1 action
    #####: 1080:    state->numActions++;
        -: 1081:
        -: 1082:    //discard card from hand
    #####: 1083:    discardCard(handPos, currentPlayer, state, 0);
        -: 1084:
    #####: 1085:    if (choice1) //+2 coins
        -: 1086:    {
    #####: 1087:      state->coins = state->coins + 2;
        -: 1088:    }
        -: 1089:
    #####: 1090:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1091:    {
        -: 1092:      //discard hand
    #####: 1093:      while (numHandCards(state) > 0)
        -: 1094:      {
    #####: 1095:        discardCard(handPos, currentPlayer, state, 0);
        -: 1096:      }
        -: 1097:
        -: 1098:      //draw 4
    #####: 1099:      for (i = 0; i < 4; i++)
        -: 1100:      {
    #####: 1101:        drawCard(currentPlayer, state);
        -: 1102:      }
        -: 1103:
        -: 1104:      //other players discard hand and redraw if hand size > 4
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
        -: 1106:      {
    #####: 1107:        if (i != currentPlayer)
        -: 1108:        {
    #####: 1109:          if (state->handCount[i] > 4)
        -: 1110:          {
        -: 1111:            //discard hand
    #####: 1112:            while (state->handCount[i] > 0)
        -: 1113:            {
    #####: 1114:              discardCard(handPos, i, state, 0);
        -: 1115:            }
        -: 1116:
        -: 1117:            //draw 4
    #####: 1118:            for (j = 0; j < 4; j++)
        -: 1119:            {
    #####: 1120:              drawCard(i, state);
        -: 1121:            }
        -: 1122:          }
        -: 1123:        }
        -: 1124:      }
        -: 1125:    }
    #####: 1126:    return 0;
        -: 1127:
    #####: 1128:  case steward:
    #####: 1129:    if (choice1 == 1)
        -: 1130:    {
        -: 1131:      //+2 cards
    #####: 1132:      drawCard(currentPlayer, state);
    #####: 1133:      drawCard(currentPlayer, state);
        -: 1134:    }
    #####: 1135:    else if (choice1 == 2)
        -: 1136:    {
        -: 1137:      //+2 coins
    #####: 1138:      state->coins = state->coins + 2;
        -: 1139:    }
        -: 1140:    else
        -: 1141:    {
        -: 1142:      //trash 2 cards in hand
    #####: 1143:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:      discardCard(choice3, currentPlayer, state, 1);
        -: 1145:    }
        -: 1146:
        -: 1147:    //discard card from hand
    #####: 1148:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:    return 0;
        -: 1150:
    #####: 1151:  case tribute:
    #####: 1152:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1153:    {
    #####: 1154:      if (state->deckCount[nextPlayer] > 0)
        -: 1155:      {
    #####: 1156:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1157:        state->deckCount[nextPlayer]--;
        -: 1158:      }
    #####: 1159:      else if (state->discardCount[nextPlayer] > 0)
        -: 1160:      {
    #####: 1161:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1162:        state->discardCount[nextPlayer]--;
        -: 1163:      }
        -: 1164:      else
        -: 1165:      {
        -: 1166:        //No Card to Reveal
        -: 1167:        if (DEBUG)
        -: 1168:        {
        -: 1169:          printf("No cards to reveal\n");
        -: 1170:        }
        -: 1171:      }
        -: 1172:    }
        -: 1173:
        -: 1174:    else
        -: 1175:    {
    #####: 1176:      if (state->deckCount[nextPlayer] == 0)
        -: 1177:      {
    #####: 1178:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1179:        {
    #####: 1180:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1181:          state->deckCount[nextPlayer]++;
    #####: 1182:          state->discard[nextPlayer][i] = -1;
    #####: 1183:          state->discardCount[nextPlayer]--;
        -: 1184:        }
        -: 1185:
    #####: 1186:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1187:      }
    #####: 1188:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1189:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:      state->deckCount[nextPlayer]--;
    #####: 1191:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1192:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:      state->deckCount[nextPlayer]--;
        -: 1194:    }
        -: 1195:
    #####: 1196:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1197:    { //If we have a duplicate card, just drop one
    #####: 1198:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1199:      state->playedCardCount++;
    #####: 1200:      tributeRevealedCards[1] = -1;
        -: 1201:    }
        -: 1202:
    #####: 1203:    for (i = 0; i <= 2; i++)
        -: 1204:    {
    #####: 1205:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1206:      { //Treasure cards
    #####: 1207:        state->coins += 2;
        -: 1208:      }
        -: 1209:
    #####: 1210:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1211:      { //Victory Card Found
    #####: 1212:        drawCard(currentPlayer, state);
    #####: 1213:        drawCard(currentPlayer, state);
        -: 1214:      }
        -: 1215:      else
        -: 1216:      { //Action Card
    #####: 1217:        state->numActions = state->numActions + 2;
        -: 1218:      }
        -: 1219:    }
        -: 1220:
    #####: 1221:    return 0;
        -: 1222:
    #####: 1223:  case ambassador:
    #####: 1224:    j = 0; //used to check if player has enough cards to discard
        -: 1225:
    #####: 1226:    if (choice2 > 2 || choice2 < 0)
        -: 1227:    {
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:    if (choice1 == handPos)
        -: 1232:    {
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:
    #####: 1236:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:    {
    #####: 1238:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1239:      {
    #####: 1240:        j++;
        -: 1241:      }
        -: 1242:    }
    #####: 1243:    if (j < choice2)
        -: 1244:    {
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:
        -: 1248:    if (DEBUG)
        -: 1249:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1250:
        -: 1251:    //increase supply count for choosen card by amount being discarded
    #####: 1252:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1253:
        -: 1254:    //each other player gains a copy of revealed card
    #####: 1255:    for (i = 0; i < state->numPlayers; i++)
        -: 1256:    {
    #####: 1257:      if (i != currentPlayer)
        -: 1258:      {
    #####: 1259:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1260:      }
        -: 1261:    }
        -: 1262:
        -: 1263:    //discard played card from hand
    #####: 1264:    discardCard(handPos, currentPlayer, state, 0);
        -: 1265:
        -: 1266:    //trash copies of cards returned to supply
    #####: 1267:    for (j = 0; j < choice2; j++)
        -: 1268:    {
    #####: 1269:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:      {
    #####: 1271:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1272:        {
    #####: 1273:          discardCard(i, currentPlayer, state, 1);
    #####: 1274:          break;
        -: 1275:        }
        -: 1276:      }
        -: 1277:    }
        -: 1278:
    #####: 1279:    return 0;
        -: 1280:
    #####: 1281:  case cutpurse:
        -: 1282:
    #####: 1283:    updateCoins(currentPlayer, state, 2);
    #####: 1284:    for (i = 0; i < state->numPlayers; i++)
        -: 1285:    {
    #####: 1286:      if (i != currentPlayer)
        -: 1287:      {
    #####: 1288:        for (j = 0; j < state->handCount[i]; j++)
        -: 1289:        {
    #####: 1290:          if (state->hand[i][j] == copper)
        -: 1291:          {
    #####: 1292:            discardCard(j, i, state, 0);
    #####: 1293:            break;
        -: 1294:          }
    #####: 1295:          if (j == state->handCount[i])
        -: 1296:          {
    #####: 1297:            for (k = 0; k < state->handCount[i]; k++)
        -: 1298:            {
        -: 1299:              if (DEBUG)
        -: 1300:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1301:            }
    #####: 1302:            break;
        -: 1303:          }
        -: 1304:        }
        -: 1305:      }
        -: 1306:    }
        -: 1307:
        -: 1308:    //discard played card from hand
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0);
        -: 1310:
    #####: 1311:    return 0;
        -: 1312:
    #####: 1313:  case embargo:
        -: 1314:    //+2 Coins
    #####: 1315:    state->coins = state->coins + 2;
        -: 1316:
        -: 1317:    //see if selected pile is in play
    #####: 1318:    if (state->supplyCount[choice1] == -1)
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:    //add embargo token to selected supply pile
    #####: 1324:    state->embargoTokens[choice1]++;
        -: 1325:
        -: 1326:    //trash card
    #####: 1327:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1328:    return 0;
        -: 1329:
    #####: 1330:  case outpost:
        -: 1331:    //set outpost flag
    #####: 1332:    state->outpostPlayed++;
        -: 1333:
        -: 1334:    //discard card
    #####: 1335:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:    return 0;
        -: 1337:
    #####: 1338:  case salvager:
        -: 1339:    //+1 buy
    #####: 1340:    state->numBuys++;
        -: 1341:
    #####: 1342:    if (choice1)
        -: 1343:    {
        -: 1344:      //gain coins equal to trashed card
    #####: 1345:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1346:      //trash card
    #####: 1347:      discardCard(choice1, currentPlayer, state, 1);
        -: 1348:    }
        -: 1349:
        -: 1350:    //discard card
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1352:    return 0;
        -: 1353:
    #####: 1354:  case sea_hag:
    #####: 1355:    for (i = 0; i < state->numPlayers; i++)
        -: 1356:    {
    #####: 1357:      if (i != currentPlayer)
        -: 1358:      {
    #####: 1359:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1360:        state->deckCount[i]--;
    #####: 1361:        state->discardCount[i]++;
    #####: 1362:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1363:      }
        -: 1364:    }
    #####: 1365:    return 0;
        -: 1366:
    #####: 1367:  case treasure_map:
        -: 1368:    //search hand for another treasure_map
    #####: 1369:    index = -1;
    #####: 1370:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1371:    {
    #####: 1372:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1373:      {
    #####: 1374:        index = i;
    #####: 1375:        break;
        -: 1376:      }
        -: 1377:    }
    #####: 1378:    if (index > -1)
        -: 1379:    {
        -: 1380:      //trash both treasure cards
    #####: 1381:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1382:      discardCard(index, currentPlayer, state, 1);
        -: 1383:
        -: 1384:      //gain 4 Gold cards
    #####: 1385:      for (i = 0; i < 4; i++)
        -: 1386:      {
    #####: 1387:        gainCard(gold, state, 1, currentPlayer);
        -: 1388:      }
        -: 1389:
        -: 1390:      //return success
    #####: 1391:      return 1;
        -: 1392:    }
        -: 1393:
        -: 1394:    //no second treasure_map found in hand
    #####: 1395:    return -1;
        -: 1396:  }
        -: 1397:
    #####: 1398:  return -1;
        -: 1399:}
        -: 1400:
        2: 1401:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1402:{
        -: 1403:
        -: 1404:  //if card is not trashed, added to Played pile
        2: 1405:  if (trashFlag < 1)
        -: 1406:  {
        -: 1407:    //add card to played pile
        2: 1408:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1409:    state->playedCardCount++;
        -: 1410:  }
        -: 1411:
        -: 1412:  //set played card to -1
        2: 1413:  state->hand[currentPlayer][handPos] = -1;
        -: 1414:
        -: 1415:  //remove card from player's hand
        2: 1416:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1417:  {
        -: 1418:    //reduce number of cards in hand
        1: 1419:    state->handCount[currentPlayer]--;
        -: 1420:  }
        1: 1421:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1422:  {
        -: 1423:    //reduce number of cards in hand
    #####: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:  else
        -: 1427:  {
        -: 1428:    //replace discarded card with last card in hand
        1: 1429:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1430:    //set last card to -1
        1: 1431:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1432:    //reduce number of cards in hand
        1: 1433:    state->handCount[currentPlayer]--;
        -: 1434:  }
        -: 1435:
        2: 1436:  return 0;
        -: 1437:}
        -: 1438:
        1: 1439:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1440:{
        -: 1441:  //Note: supplyPos is enum of choosen card
        -: 1442:
        -: 1443:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1444:  if (supplyCount(supplyPos, state) < 1)
        -: 1445:  {
    #####: 1446:    return -1;
        -: 1447:  }
        -: 1448:
        -: 1449:  //added card for [whoseTurn] current player:
        -: 1450:  // toFlag = 0 : add to discard
        -: 1451:  // toFlag = 1 : add to deck
        -: 1452:  // toFlag = 2 : add to hand
        -: 1453:
        1: 1454:  if (toFlag == 1)
        -: 1455:  {
    #####: 1456:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1457:    state->deckCount[player]++;
        -: 1458:  }
        1: 1459:  else if (toFlag == 2)
        -: 1460:  {
        1: 1461:    state->hand[player][state->handCount[player]] = supplyPos;
        1: 1462:    state->handCount[player]++;
        -: 1463:  }
        -: 1464:  else
        -: 1465:  {
    #####: 1466:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1467:    state->discardCount[player]++;
        -: 1468:  }
        -: 1469:
        -: 1470:  //decrease number in supply pile
        1: 1471:  state->supplyCount[supplyPos]--;
        -: 1472:
        1: 1473:  return 0;
        -: 1474:}
        -: 1475:
        1: 1476:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1477:{
        -: 1478:  int i;
        -: 1479:
        -: 1480:  //reset coin count
        1: 1481:  state->coins = 0;
        -: 1482:
        -: 1483:  //add coins for each Treasure card in player's hand
        6: 1484:  for (i = 0; i < state->handCount[player]; i++)
        -: 1485:  {
        5: 1486:    if (state->hand[player][i] == copper)
        -: 1487:    {
        4: 1488:      state->coins += 1;
        -: 1489:    }
        1: 1490:    else if (state->hand[player][i] == silver)
        -: 1491:    {
    #####: 1492:      state->coins += 2;
        -: 1493:    }
        1: 1494:    else if (state->hand[player][i] == gold)
        -: 1495:    {
    #####: 1496:      state->coins += 3;
        -: 1497:    }
        -: 1498:  }
        -: 1499:
        -: 1500:  //add bonus
        1: 1501:  state->coins += bonus;
        -: 1502:
        1: 1503:  return 0;
        -: 1504:}
        -: 1505:
        -: 1506://end of dominion.c
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void *a, const void *b)
        -:    9:{
       30:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       30:   12:  if (*(int *)a < *(int *)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
        1:   17:struct gameState *newGame()
        -:   18:{
        1:   19:  struct gameState *g = malloc(sizeof(struct gameState));
        1:   20:  return g;
        -:   21:}
        -:   22:
        1:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
        1:   26:  int *k = malloc(10 * sizeof(int));
        1:   27:  k[0] = k1;
        1:   28:  k[1] = k2;
        1:   29:  k[2] = k3;
        1:   30:  k[3] = k4;
        1:   31:  k[4] = k5;
        1:   32:  k[5] = k6;
        1:   33:  k[6] = k7;
        1:   34:  k[7] = k8;
        1:   35:  k[8] = k9;
        1:   36:  k[9] = k10;
        1:   37:  return k;
        -:   38:}
        -:   39:
        1:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        1:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       11:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      110:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       21:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      214:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      197:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
        3:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
    #####:  118:          if (numPlayers == 2)
        -:  119:          {
    #####:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
        3:  129:          state->supplyCount[i] = 10;
        -:  130:        }
        3:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      194:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        3:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
        8:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        -:  151:    }
       16:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        3:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        3:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       28:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
        6:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       20:  223:    card = floor(Random() * state->deckCount[player]);
       20:  224:    newDeck[newDeckPos] = state->deck[player][card];
       20:  225:    newDeckPos++;
       67:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
       47:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       20:  230:    state->deckCount[player]--;
        -:  231:  }
       22:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       20:  234:    state->deck[player][i] = newDeck[i];
       20:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        2:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        1:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        1:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        4:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        4:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        5:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
        5:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
        5:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
        5:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
        5:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
        5:  672:    state->deckCount[player]--;
        5:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
        5:  676:  return 0;
        -:  677:}
        -:  678:
        4:  679:int getCost(int cardNumber)
        -:  680:{
        4:  681:  switch (cardNumber)
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
        2:  691:  case copper:
        2:  692:    return 0;
        1:  693:  case silver:
        1:  694:    return 3;
        1:  695:  case gold:
        1:  696:    return 6;
    #####:  697:  case adventurer:
    #####:  698:    return 6;
    #####:  699:  case council_room:
    #####:  700:    return 5;
    #####:  701:  case feast:
    #####:  702:    return 4;
    #####:  703:  case gardens:
    #####:  704:    return 4;
    #####:  705:  case mine:
    #####:  706:    return 5;
    #####:  707:  case remodel:
    #####:  708:    return 4;
    #####:  709:  case smithy:
    #####:  710:    return 4;
    #####:  711:  case village:
    #####:  712:    return 3;
    #####:  713:  case baron:
    #####:  714:    return 4;
    #####:  715:  case great_hall:
    #####:  716:    return 3;
    #####:  717:  case minion:
    #####:  718:    return 5;
    #####:  719:  case steward:
    #####:  720:    return 3;
    #####:  721:  case tribute:
    #####:  722:    return 5;
    #####:  723:  case ambassador:
    #####:  724:    return 3;
    #####:  725:  case cutpurse:
    #####:  726:    return 4;
    #####:  727:  case embargo:
    #####:  728:    return 2;
    #####:  729:  case outpost:
    #####:  730:    return 5;
    #####:  731:  case salvager:
    #####:  732:    return 4;
    #####:  733:  case sea_hag:
    #####:  734:    return 4;
    #####:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int smithyEffect(int handPos, struct gameState *state)
        -:  743:{
    #####:  744:  int currentPlayer = whoseTurn(state);
        -:  745:  int i;
        -:  746:
        -:  747:  //+3 Cards
    #####:  748:  for (i = 0; i < 3; i++)
        -:  749:  {
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:  }
        -:  752:
        -:  753:  //discard card from hand
    #####:  754:  discardCard(handPos--, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int adventurerEffect(struct gameState *state)
        -:  759:{
    #####:  760:  int drawntreasure = 0;
    #####:  761:  int currentPlayer = whoseTurn(state);
        -:  762:  int cardDrawn;
        -:  763:  int temphand[MAX_HAND];
    #####:  764:  int z = 0;
        -:  765:
    #####:  766:  while (drawntreasure < 2)
        -:  767:  {
    #####:  768:    if (state->deckCount[currentPlayer] < 1)
        -:  769:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  770:      shuffle(currentPlayer, state);
        -:  771:    }
    #####:  772:    drawCard(currentPlayer, state);
    #####:  773:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####:  774:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  775:      drawntreasure++;
        -:  776:    else
        -:  777:    {
    #####:  778:      temphand[z] = cardDrawn;
    #####:  779:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  780:      z++;
        -:  781:    }
        -:  782:  }
    #####:  783:  while (z - 1 >= 0)
        -:  784:  {
    #####:  785:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  786:    z = z - 1;
        -:  787:  }
    #####:  788:  return 0;
        -:  789:}
        -:  790:
    #####:  791:int villageEffect(int handPos, struct gameState *state)
        -:  792:{
    #####:  793:  int currentPlayer = whoseTurn(state);
        -:  794:
        -:  795:  //+1 Card
    #####:  796:  drawCard(currentPlayer, state);
        -:  797:
        -:  798:  //+2 Actions
    #####:  799:  state->numActions = state->numActions + 2;
        -:  800:
        -:  801:  //discard played card from hand
    #####:  802:  discardCard(handPos, currentPlayer, state, 0);
    #####:  803:  return 0;
        -:  804:}
        -:  805:
    #####:  806:int greathallEffect(int handPos, struct gameState *state)
        -:  807:{
    #####:  808:  int currentPlayer = whoseTurn(state);
        -:  809:  //printf("prev state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
        -:  810:  //+1 Card
    #####:  811:  drawCard(currentPlayer, state);
        -:  812:
        -:  813:  //+1 Actions
    #####:  814:  state->numActions++;
        -:  815:
        -:  816:  //discard card from hand
    #####:  817:  discardCard(handPos, currentPlayer, state, 0);
        -:  818:  // printf("post state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
    #####:  819:  return 0;
        -:  820:}
        -:  821:
    #####:  822:int councilroomEffect(int handPos, struct gameState *state)
        -:  823:{
        -:  824:  int i;
    #####:  825:  int currentPlayer = whoseTurn(state);
        -:  826:  //+4 Cards
    #####:  827:  for (i = 0; i < 4; i++)
        -:  828:  {
    #####:  829:    drawCard(currentPlayer, state);
        -:  830:  }
        -:  831:
        -:  832:  //+1 Buy
    #####:  833:  state->numBuys++;
        -:  834:
        -:  835:  //Each other player draws a card
    #####:  836:  for (i = 0; i < state->numPlayers; i++)
        -:  837:  {
    #####:  838:    if (i != currentPlayer)
        -:  839:    {
    #####:  840:      drawCard(i, state);
        -:  841:    }
        -:  842:  }
        -:  843:
        -:  844:  //put played card in played card pile
    #####:  845:  discardCard(handPos, currentPlayer, state, 0);
        -:  846:
    #####:  847:  return 0;
        -:  848:}
        -:  849:
        4:  850:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  851:{
        -:  852:  int i;
        -:  853:  int j;
        -:  854:  int k;
        -:  855:  int x;
        -:  856:  int index;
        4:  857:  int currentPlayer = whoseTurn(state);
        4:  858:  int nextPlayer = currentPlayer + 1;
        -:  859:
        4:  860:  int tributeRevealedCards[2] = {-1, -1};
        -:  861:  int temphand[MAX_HAND]; // moved above the if statement
        4:  862:  int drawntreasure = 0;
        -:  863:  int cardDrawn;
        4:  864:  int z = 0; // this is the counter for the temp hand
        4:  865:  if (nextPlayer > (state->numPlayers - 1))
        -:  866:  {
    #####:  867:    nextPlayer = 0;
        -:  868:  }
        4:  869:  if (card == great_hall)
        -:  870:  {
    #####:  871:    printf("great_hall\n");
        -:  872:  }
        -:  873:  //uses switch to select card and perform actions
        4:  874:  switch (card)
        -:  875:  {
    #####:  876:  case adventurer:
    #####:  877:    return adventurerEffect(state);
        -:  878:
    #####:  879:  case council_room:
    #####:  880:    return councilroomEffect(handPos, state);
        -:  881:
    #####:  882:  case feast:
        -:  883:    //gain card with cost up to 5
        -:  884:    //Backup hand
    #####:  885:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  886:    {
    #####:  887:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  888:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  889:    }
        -:  890:    //Backup hand
        -:  891:
        -:  892:    //Update Coins for Buy
    #####:  893:    updateCoins(currentPlayer, state, 5);
    #####:  894:    x = 1; //Condition to loop on
    #####:  895:    while (x == 1)
        -:  896:    { //Buy one card
    #####:  897:      if (supplyCount(choice1, state) <= 0)
        -:  898:      {
        -:  899:        if (DEBUG)
        -:  900:          printf("None of that card left, sorry!\n");
        -:  901:
        -:  902:        if (DEBUG)
        -:  903:        {
        -:  904:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  905:        }
        -:  906:      }
    #####:  907:      else if (state->coins < getCost(choice1))
        -:  908:      {
    #####:  909:        printf("That card is too expensive!\n");
        -:  910:
        -:  911:        if (DEBUG)
        -:  912:        {
        -:  913:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  914:        }
        -:  915:      }
        -:  916:      else
        -:  917:      {
        -:  918:
        -:  919:        if (DEBUG)
        -:  920:        {
        -:  921:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:        }
        -:  923:
    #####:  924:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  925:        x = 0;                                      //No more buying cards
        -:  926:
        -:  927:        if (DEBUG)
        -:  928:        {
        -:  929:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:        }
        -:  931:      }
        -:  932:    }
        -:  933:
        -:  934:    //Reset Hand
    #####:  935:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  936:    {
    #####:  937:      state->hand[currentPlayer][i] = temphand[i];
    #####:  938:      temphand[i] = -1;
        -:  939:    }
        -:  940:    //Reset Hand
        -:  941:
    #####:  942:    return 0;
        -:  943:
    #####:  944:  case gardens:
    #####:  945:    return -1;
        -:  946:
        4:  947:  case mine:
        4:  948:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  949:
        4:  950:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  951:    {
        2:  952:      return -1;
        -:  953:    }
        -:  954:
        2:  955:    if (choice2 > treasure_map || choice2 < curse)
        -:  956:    {
    #####:  957:      return -1;
        -:  958:    }
        -:  959:
        2:  960:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  961:    {
        1:  962:      return -1;
        -:  963:    }
        -:  964:
        1:  965:    gainCard(choice2, state, 2, currentPlayer);
        -:  966:
        -:  967:    //discard card from hand
        1:  968:    discardCard(handPos, currentPlayer, state, 0);
        -:  969:
        -:  970:    //discard trashed card
        5:  971:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  972:    {
        5:  973:      if (state->hand[currentPlayer][i] == j)
        -:  974:      {
        1:  975:        discardCard(i, currentPlayer, state, 0);
        1:  976:        break;
        -:  977:      }
        -:  978:    }
        -:  979:
        1:  980:    return 0;
        -:  981:
    #####:  982:  case remodel:
    #####:  983:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  984:
    #####:  985:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  986:    {
    #####:  987:      return -1;
        -:  988:    }
        -:  989:
    #####:  990:    gainCard(choice2, state, 0, currentPlayer);
        -:  991:
        -:  992:    //discard card from hand
    #####:  993:    discardCard(handPos, currentPlayer, state, 0);
        -:  994:
        -:  995:    //discard trashed card
    #####:  996:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  997:    {
    #####:  998:      if (state->hand[currentPlayer][i] == j)
        -:  999:      {
    #####: 1000:        discardCard(i, currentPlayer, state, 0);
    #####: 1001:        break;
        -: 1002:      }
        -: 1003:    }
        -: 1004:
    #####: 1005:    return 0;
        -: 1006:
    #####: 1007:  case smithy:
    #####: 1008:    return smithyEffect(handPos, state);
        -: 1009:
    #####: 1010:  case village:
    #####: 1011:    return villageEffect(handPos, state);
        -: 1012:
    #####: 1013:  case baron:
    #####: 1014:    state->numBuys++; //Increase buys by 1!
    #####: 1015:    if (choice1 > 0)
        -: 1016:    {                             //Boolean true or going to discard an estate
    #####: 1017:      int p = 0;                  //Iterator for hand!
    #####: 1018:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1019:      while (card_not_discarded)
        -: 1020:      {
    #####: 1021:        if (state->hand[currentPlayer][p] == estate)
        -: 1022:        {                    //Found an estate card!
    #####: 1023:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1024:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1025:          state->discardCount[currentPlayer]++;
    #####: 1026:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1027:          {
    #####: 1028:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1029:          }
    #####: 1030:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1031:          state->handCount[currentPlayer]--;
    #####: 1032:          card_not_discarded = 0; //Exit the loop
        -: 1033:        }
    #####: 1034:        else if (p > state->handCount[currentPlayer])
        -: 1035:        {
        -: 1036:          if (DEBUG)
        -: 1037:          {
        -: 1038:            printf("No estate cards in your hand, invalid choice\n");
        -: 1039:            printf("Must gain an estate if there are any\n");
        -: 1040:          }
    #####: 1041:          if (supplyCount(estate, state) > 0)
        -: 1042:          {
    #####: 1043:            gainCard(estate, state, 0, currentPlayer);
    #####: 1044:            state->supplyCount[estate]--; //Decrement estates
    #####: 1045:            if (supplyCount(estate, state) == 0)
        -: 1046:            {
    #####: 1047:              isGameOver(state);
        -: 1048:            }
        -: 1049:          }
    #####: 1050:          card_not_discarded = 0; //Exit the loop
        -: 1051:        }
        -: 1052:
        -: 1053:        else
        -: 1054:        {
    #####: 1055:          p++; //Next card
        -: 1056:        }
        -: 1057:      }
        -: 1058:    }
        -: 1059:
        -: 1060:    else
        -: 1061:    {
    #####: 1062:      if (supplyCount(estate, state) > 0)
        -: 1063:      {
    #####: 1064:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1065:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1066:        if (supplyCount(estate, state) == 0)
        -: 1067:        {
    #####: 1068:          isGameOver(state);
        -: 1069:        }
        -: 1070:      }
        -: 1071:    }
        -: 1072:
    #####: 1073:    return 0;
        -: 1074:
    #####: 1075:  case great_hall:
    #####: 1076:    return greathallEffect(handPos, state);
        -: 1077:
    #####: 1078:  case minion:
        -: 1079:    //+1 action
    #####: 1080:    state->numActions++;
        -: 1081:
        -: 1082:    //discard card from hand
    #####: 1083:    discardCard(handPos, currentPlayer, state, 0);
        -: 1084:
    #####: 1085:    if (choice1) //+2 coins
        -: 1086:    {
    #####: 1087:      state->coins = state->coins + 2;
        -: 1088:    }
        -: 1089:
    #####: 1090:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1091:    {
        -: 1092:      //discard hand
    #####: 1093:      while (numHandCards(state) > 0)
        -: 1094:      {
    #####: 1095:        discardCard(handPos, currentPlayer, state, 0);
        -: 1096:      }
        -: 1097:
        -: 1098:      //draw 4
    #####: 1099:      for (i = 0; i < 4; i++)
        -: 1100:      {
    #####: 1101:        drawCard(currentPlayer, state);
        -: 1102:      }
        -: 1103:
        -: 1104:      //other players discard hand and redraw if hand size > 4
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
        -: 1106:      {
    #####: 1107:        if (i != currentPlayer)
        -: 1108:        {
    #####: 1109:          if (state->handCount[i] > 4)
        -: 1110:          {
        -: 1111:            //discard hand
    #####: 1112:            while (state->handCount[i] > 0)
        -: 1113:            {
    #####: 1114:              discardCard(handPos, i, state, 0);
        -: 1115:            }
        -: 1116:
        -: 1117:            //draw 4
    #####: 1118:            for (j = 0; j < 4; j++)
        -: 1119:            {
    #####: 1120:              drawCard(i, state);
        -: 1121:            }
        -: 1122:          }
        -: 1123:        }
        -: 1124:      }
        -: 1125:    }
    #####: 1126:    return 0;
        -: 1127:
    #####: 1128:  case steward:
    #####: 1129:    if (choice1 == 1)
        -: 1130:    {
        -: 1131:      //+2 cards
    #####: 1132:      drawCard(currentPlayer, state);
    #####: 1133:      drawCard(currentPlayer, state);
        -: 1134:    }
    #####: 1135:    else if (choice1 == 2)
        -: 1136:    {
        -: 1137:      //+2 coins
    #####: 1138:      state->coins = state->coins + 2;
        -: 1139:    }
        -: 1140:    else
        -: 1141:    {
        -: 1142:      //trash 2 cards in hand
    #####: 1143:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:      discardCard(choice3, currentPlayer, state, 1);
        -: 1145:    }
        -: 1146:
        -: 1147:    //discard card from hand
    #####: 1148:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:    return 0;
        -: 1150:
    #####: 1151:  case tribute:
    #####: 1152:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1153:    {
    #####: 1154:      if (state->deckCount[nextPlayer] > 0)
        -: 1155:      {
    #####: 1156:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1157:        state->deckCount[nextPlayer]--;
        -: 1158:      }
    #####: 1159:      else if (state->discardCount[nextPlayer] > 0)
        -: 1160:      {
    #####: 1161:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1162:        state->discardCount[nextPlayer]--;
        -: 1163:      }
        -: 1164:      else
        -: 1165:      {
        -: 1166:        //No Card to Reveal
        -: 1167:        if (DEBUG)
        -: 1168:        {
        -: 1169:          printf("No cards to reveal\n");
        -: 1170:        }
        -: 1171:      }
        -: 1172:    }
        -: 1173:
        -: 1174:    else
        -: 1175:    {
    #####: 1176:      if (state->deckCount[nextPlayer] == 0)
        -: 1177:      {
    #####: 1178:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1179:        {
    #####: 1180:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1181:          state->deckCount[nextPlayer]++;
    #####: 1182:          state->discard[nextPlayer][i] = -1;
    #####: 1183:          state->discardCount[nextPlayer]--;
        -: 1184:        }
        -: 1185:
    #####: 1186:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1187:      }
    #####: 1188:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1189:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:      state->deckCount[nextPlayer]--;
    #####: 1191:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1192:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:      state->deckCount[nextPlayer]--;
        -: 1194:    }
        -: 1195:
    #####: 1196:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1197:    { //If we have a duplicate card, just drop one
    #####: 1198:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1199:      state->playedCardCount++;
    #####: 1200:      tributeRevealedCards[1] = -1;
        -: 1201:    }
        -: 1202:
    #####: 1203:    for (i = 0; i <= 2; i++)
        -: 1204:    {
    #####: 1205:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1206:      { //Treasure cards
    #####: 1207:        state->coins += 2;
        -: 1208:      }
        -: 1209:
    #####: 1210:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1211:      { //Victory Card Found
    #####: 1212:        drawCard(currentPlayer, state);
    #####: 1213:        drawCard(currentPlayer, state);
        -: 1214:      }
        -: 1215:      else
        -: 1216:      { //Action Card
    #####: 1217:        state->numActions = state->numActions + 2;
        -: 1218:      }
        -: 1219:    }
        -: 1220:
    #####: 1221:    return 0;
        -: 1222:
    #####: 1223:  case ambassador:
    #####: 1224:    j = 0; //used to check if player has enough cards to discard
        -: 1225:
    #####: 1226:    if (choice2 > 2 || choice2 < 0)
        -: 1227:    {
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:    if (choice1 == handPos)
        -: 1232:    {
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:
    #####: 1236:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:    {
    #####: 1238:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1239:      {
    #####: 1240:        j++;
        -: 1241:      }
        -: 1242:    }
    #####: 1243:    if (j < choice2)
        -: 1244:    {
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:
        -: 1248:    if (DEBUG)
        -: 1249:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1250:
        -: 1251:    //increase supply count for choosen card by amount being discarded
    #####: 1252:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1253:
        -: 1254:    //each other player gains a copy of revealed card
    #####: 1255:    for (i = 0; i < state->numPlayers; i++)
        -: 1256:    {
    #####: 1257:      if (i != currentPlayer)
        -: 1258:      {
    #####: 1259:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1260:      }
        -: 1261:    }
        -: 1262:
        -: 1263:    //discard played card from hand
    #####: 1264:    discardCard(handPos, currentPlayer, state, 0);
        -: 1265:
        -: 1266:    //trash copies of cards returned to supply
    #####: 1267:    for (j = 0; j < choice2; j++)
        -: 1268:    {
    #####: 1269:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:      {
    #####: 1271:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1272:        {
    #####: 1273:          discardCard(i, currentPlayer, state, 1);
    #####: 1274:          break;
        -: 1275:        }
        -: 1276:      }
        -: 1277:    }
        -: 1278:
    #####: 1279:    return 0;
        -: 1280:
    #####: 1281:  case cutpurse:
        -: 1282:
    #####: 1283:    updateCoins(currentPlayer, state, 2);
    #####: 1284:    for (i = 0; i < state->numPlayers; i++)
        -: 1285:    {
    #####: 1286:      if (i != currentPlayer)
        -: 1287:      {
    #####: 1288:        for (j = 0; j < state->handCount[i]; j++)
        -: 1289:        {
    #####: 1290:          if (state->hand[i][j] == copper)
        -: 1291:          {
    #####: 1292:            discardCard(j, i, state, 0);
    #####: 1293:            break;
        -: 1294:          }
    #####: 1295:          if (j == state->handCount[i])
        -: 1296:          {
    #####: 1297:            for (k = 0; k < state->handCount[i]; k++)
        -: 1298:            {
        -: 1299:              if (DEBUG)
        -: 1300:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1301:            }
    #####: 1302:            break;
        -: 1303:          }
        -: 1304:        }
        -: 1305:      }
        -: 1306:    }
        -: 1307:
        -: 1308:    //discard played card from hand
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0);
        -: 1310:
    #####: 1311:    return 0;
        -: 1312:
    #####: 1313:  case embargo:
        -: 1314:    //+2 Coins
    #####: 1315:    state->coins = state->coins + 2;
        -: 1316:
        -: 1317:    //see if selected pile is in play
    #####: 1318:    if (state->supplyCount[choice1] == -1)
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:    //add embargo token to selected supply pile
    #####: 1324:    state->embargoTokens[choice1]++;
        -: 1325:
        -: 1326:    //trash card
    #####: 1327:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1328:    return 0;
        -: 1329:
    #####: 1330:  case outpost:
        -: 1331:    //set outpost flag
    #####: 1332:    state->outpostPlayed++;
        -: 1333:
        -: 1334:    //discard card
    #####: 1335:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:    return 0;
        -: 1337:
    #####: 1338:  case salvager:
        -: 1339:    //+1 buy
    #####: 1340:    state->numBuys++;
        -: 1341:
    #####: 1342:    if (choice1)
        -: 1343:    {
        -: 1344:      //gain coins equal to trashed card
    #####: 1345:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1346:      //trash card
    #####: 1347:      discardCard(choice1, currentPlayer, state, 1);
        -: 1348:    }
        -: 1349:
        -: 1350:    //discard card
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1352:    return 0;
        -: 1353:
    #####: 1354:  case sea_hag:
    #####: 1355:    for (i = 0; i < state->numPlayers; i++)
        -: 1356:    {
    #####: 1357:      if (i != currentPlayer)
        -: 1358:      {
    #####: 1359:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1360:        state->deckCount[i]--;
    #####: 1361:        state->discardCount[i]++;
    #####: 1362:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1363:      }
        -: 1364:    }
    #####: 1365:    return 0;
        -: 1366:
    #####: 1367:  case treasure_map:
        -: 1368:    //search hand for another treasure_map
    #####: 1369:    index = -1;
    #####: 1370:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1371:    {
    #####: 1372:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1373:      {
    #####: 1374:        index = i;
    #####: 1375:        break;
        -: 1376:      }
        -: 1377:    }
    #####: 1378:    if (index > -1)
        -: 1379:    {
        -: 1380:      //trash both treasure cards
    #####: 1381:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1382:      discardCard(index, currentPlayer, state, 1);
        -: 1383:
        -: 1384:      //gain 4 Gold cards
    #####: 1385:      for (i = 0; i < 4; i++)
        -: 1386:      {
    #####: 1387:        gainCard(gold, state, 1, currentPlayer);
        -: 1388:      }
        -: 1389:
        -: 1390:      //return success
    #####: 1391:      return 1;
        -: 1392:    }
        -: 1393:
        -: 1394:    //no second treasure_map found in hand
    #####: 1395:    return -1;
        -: 1396:  }
        -: 1397:
    #####: 1398:  return -1;
        -: 1399:}
        -: 1400:
        2: 1401:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1402:{
        -: 1403:
        -: 1404:  //if card is not trashed, added to Played pile
        2: 1405:  if (trashFlag < 1)
        -: 1406:  {
        -: 1407:    //add card to played pile
        2: 1408:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1409:    state->playedCardCount++;
        -: 1410:  }
        -: 1411:
        -: 1412:  //set played card to -1
        2: 1413:  state->hand[currentPlayer][handPos] = -1;
        -: 1414:
        -: 1415:  //remove card from player's hand
        2: 1416:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1417:  {
        -: 1418:    //reduce number of cards in hand
        1: 1419:    state->handCount[currentPlayer]--;
        -: 1420:  }
        1: 1421:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1422:  {
        -: 1423:    //reduce number of cards in hand
    #####: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:  else
        -: 1427:  {
        -: 1428:    //replace discarded card with last card in hand
        1: 1429:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1430:    //set last card to -1
        1: 1431:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1432:    //reduce number of cards in hand
        1: 1433:    state->handCount[currentPlayer]--;
        -: 1434:  }
        -: 1435:
        2: 1436:  return 0;
        -: 1437:}
        -: 1438:
        1: 1439:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1440:{
        -: 1441:  //Note: supplyPos is enum of choosen card
        -: 1442:
        -: 1443:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1444:  if (supplyCount(supplyPos, state) < 1)
        -: 1445:  {
    #####: 1446:    return -1;
        -: 1447:  }
        -: 1448:
        -: 1449:  //added card for [whoseTurn] current player:
        -: 1450:  // toFlag = 0 : add to discard
        -: 1451:  // toFlag = 1 : add to deck
        -: 1452:  // toFlag = 2 : add to hand
        -: 1453:
        1: 1454:  if (toFlag == 1)
        -: 1455:  {
    #####: 1456:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1457:    state->deckCount[player]++;
        -: 1458:  }
        1: 1459:  else if (toFlag == 2)
        -: 1460:  {
        1: 1461:    state->hand[player][state->handCount[player]] = supplyPos;
        1: 1462:    state->handCount[player]++;
        -: 1463:  }
        -: 1464:  else
        -: 1465:  {
    #####: 1466:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1467:    state->discardCount[player]++;
        -: 1468:  }
        -: 1469:
        -: 1470:  //decrease number in supply pile
        1: 1471:  state->supplyCount[supplyPos]--;
        -: 1472:
        1: 1473:  return 0;
        -: 1474:}
        -: 1475:
        1: 1476:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1477:{
        -: 1478:  int i;
        -: 1479:
        -: 1480:  //reset coin count
        1: 1481:  state->coins = 0;
        -: 1482:
        -: 1483:  //add coins for each Treasure card in player's hand
        6: 1484:  for (i = 0; i < state->handCount[player]; i++)
        -: 1485:  {
        5: 1486:    if (state->hand[player][i] == copper)
        -: 1487:    {
        4: 1488:      state->coins += 1;
        -: 1489:    }
        1: 1490:    else if (state->hand[player][i] == silver)
        -: 1491:    {
    #####: 1492:      state->coins += 2;
        -: 1493:    }
        1: 1494:    else if (state->hand[player][i] == gold)
        -: 1495:    {
    #####: 1496:      state->coins += 3;
        -: 1497:    }
        -: 1498:  }
        -: 1499:
        -: 1500:  //add bonus
        1: 1501:  state->coins += bonus;
        -: 1502:
        1: 1503:  return 0;
        -: 1504:}
        -: 1505:
        -: 1506://end of dominion.c
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void *a, const void *b)
        -:    9:{
       30:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       30:   12:  if (*(int *)a < *(int *)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
        1:   17:struct gameState *newGame()
        -:   18:{
        1:   19:  struct gameState *g = malloc(sizeof(struct gameState));
        1:   20:  return g;
        -:   21:}
        -:   22:
        1:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
        1:   26:  int *k = malloc(10 * sizeof(int));
        1:   27:  k[0] = k1;
        1:   28:  k[1] = k2;
        1:   29:  k[2] = k3;
        1:   30:  k[3] = k4;
        1:   31:  k[4] = k5;
        1:   32:  k[5] = k6;
        1:   33:  k[6] = k7;
        1:   34:  k[7] = k8;
        1:   35:  k[8] = k9;
        1:   36:  k[9] = k10;
        1:   37:  return k;
        -:   38:}
        -:   39:
        1:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        1:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       11:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      110:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       21:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      214:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      197:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
        3:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
    #####:  118:          if (numPlayers == 2)
        -:  119:          {
    #####:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
        3:  129:          state->supplyCount[i] = 10;
        -:  130:        }
        3:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      194:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        3:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
        8:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        -:  151:    }
       16:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        3:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        3:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       28:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
        6:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       20:  223:    card = floor(Random() * state->deckCount[player]);
       20:  224:    newDeck[newDeckPos] = state->deck[player][card];
       20:  225:    newDeckPos++;
       67:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
       47:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       20:  230:    state->deckCount[player]--;
        -:  231:  }
       22:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       20:  234:    state->deck[player][i] = newDeck[i];
       20:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        2:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        1:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        1:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        4:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        4:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        5:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
        5:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
        5:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
        5:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
        5:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
        5:  672:    state->deckCount[player]--;
        5:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
        5:  676:  return 0;
        -:  677:}
        -:  678:
        4:  679:int getCost(int cardNumber)
        -:  680:{
        4:  681:  switch (cardNumber)
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
        2:  691:  case copper:
        2:  692:    return 0;
        1:  693:  case silver:
        1:  694:    return 3;
        1:  695:  case gold:
        1:  696:    return 6;
    #####:  697:  case adventurer:
    #####:  698:    return 6;
    #####:  699:  case council_room:
    #####:  700:    return 5;
    #####:  701:  case feast:
    #####:  702:    return 4;
    #####:  703:  case gardens:
    #####:  704:    return 4;
    #####:  705:  case mine:
    #####:  706:    return 5;
    #####:  707:  case remodel:
    #####:  708:    return 4;
    #####:  709:  case smithy:
    #####:  710:    return 4;
    #####:  711:  case village:
    #####:  712:    return 3;
    #####:  713:  case baron:
    #####:  714:    return 4;
    #####:  715:  case great_hall:
    #####:  716:    return 3;
    #####:  717:  case minion:
    #####:  718:    return 5;
    #####:  719:  case steward:
    #####:  720:    return 3;
    #####:  721:  case tribute:
    #####:  722:    return 5;
    #####:  723:  case ambassador:
    #####:  724:    return 3;
    #####:  725:  case cutpurse:
    #####:  726:    return 4;
    #####:  727:  case embargo:
    #####:  728:    return 2;
    #####:  729:  case outpost:
    #####:  730:    return 5;
    #####:  731:  case salvager:
    #####:  732:    return 4;
    #####:  733:  case sea_hag:
    #####:  734:    return 4;
    #####:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int smithyEffect(int handPos, struct gameState *state)
        -:  743:{
    #####:  744:  int currentPlayer = whoseTurn(state);
        -:  745:  int i;
        -:  746:
        -:  747:  //+3 Cards
    #####:  748:  for (i = 0; i < 3; i++)
        -:  749:  {
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:  }
        -:  752:
        -:  753:  //discard card from hand
    #####:  754:  discardCard(handPos--, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int adventurerEffect(struct gameState *state)
        -:  759:{
    #####:  760:  int drawntreasure = 0;
    #####:  761:  int currentPlayer = whoseTurn(state);
        -:  762:  int cardDrawn;
        -:  763:  int temphand[MAX_HAND];
    #####:  764:  int z = 0;
        -:  765:
    #####:  766:  while (drawntreasure < 2)
        -:  767:  {
    #####:  768:    if (state->deckCount[currentPlayer] < 1)
        -:  769:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  770:      shuffle(currentPlayer, state);
        -:  771:    }
    #####:  772:    drawCard(currentPlayer, state);
    #####:  773:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####:  774:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  775:      drawntreasure++;
        -:  776:    else
        -:  777:    {
    #####:  778:      temphand[z] = cardDrawn;
    #####:  779:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  780:      z++;
        -:  781:    }
        -:  782:  }
    #####:  783:  while (z - 1 >= 0)
        -:  784:  {
    #####:  785:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  786:    z = z - 1;
        -:  787:  }
    #####:  788:  return 0;
        -:  789:}
        -:  790:
    #####:  791:int villageEffect(int handPos, struct gameState *state)
        -:  792:{
    #####:  793:  int currentPlayer = whoseTurn(state);
        -:  794:
        -:  795:  //+1 Card
    #####:  796:  drawCard(currentPlayer, state);
        -:  797:
        -:  798:  //+2 Actions
    #####:  799:  state->numActions = state->numActions + 2;
        -:  800:
        -:  801:  //discard played card from hand
    #####:  802:  discardCard(handPos, currentPlayer, state, 0);
    #####:  803:  return 0;
        -:  804:}
        -:  805:
    #####:  806:int greathallEffect(int handPos, struct gameState *state)
        -:  807:{
    #####:  808:  int currentPlayer = whoseTurn(state);
        -:  809:  //printf("prev state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
        -:  810:  //+1 Card
    #####:  811:  drawCard(currentPlayer, state);
        -:  812:
        -:  813:  //+1 Actions
    #####:  814:  state->numActions++;
        -:  815:
        -:  816:  //discard card from hand
    #####:  817:  discardCard(handPos, currentPlayer, state, 0);
        -:  818:  // printf("post state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
    #####:  819:  return 0;
        -:  820:}
        -:  821:
    #####:  822:int councilroomEffect(int handPos, struct gameState *state)
        -:  823:{
        -:  824:  int i;
    #####:  825:  int currentPlayer = whoseTurn(state);
        -:  826:  //+4 Cards
    #####:  827:  for (i = 0; i < 4; i++)
        -:  828:  {
    #####:  829:    drawCard(currentPlayer, state);
        -:  830:  }
        -:  831:
        -:  832:  //+1 Buy
    #####:  833:  state->numBuys++;
        -:  834:
        -:  835:  //Each other player draws a card
    #####:  836:  for (i = 0; i < state->numPlayers; i++)
        -:  837:  {
    #####:  838:    if (i != currentPlayer)
        -:  839:    {
    #####:  840:      drawCard(i, state);
        -:  841:    }
        -:  842:  }
        -:  843:
        -:  844:  //put played card in played card pile
    #####:  845:  discardCard(handPos, currentPlayer, state, 0);
        -:  846:
    #####:  847:  return 0;
        -:  848:}
        -:  849:
        4:  850:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  851:{
        -:  852:  int i;
        -:  853:  int j;
        -:  854:  int k;
        -:  855:  int x;
        -:  856:  int index;
        4:  857:  int currentPlayer = whoseTurn(state);
        4:  858:  int nextPlayer = currentPlayer + 1;
        -:  859:
        4:  860:  int tributeRevealedCards[2] = {-1, -1};
        -:  861:  int temphand[MAX_HAND]; // moved above the if statement
        4:  862:  int drawntreasure = 0;
        -:  863:  int cardDrawn;
        4:  864:  int z = 0; // this is the counter for the temp hand
        4:  865:  if (nextPlayer > (state->numPlayers - 1))
        -:  866:  {
    #####:  867:    nextPlayer = 0;
        -:  868:  }
        4:  869:  if (card == great_hall)
        -:  870:  {
    #####:  871:    printf("great_hall\n");
        -:  872:  }
        -:  873:  //uses switch to select card and perform actions
        4:  874:  switch (card)
        -:  875:  {
    #####:  876:  case adventurer:
    #####:  877:    return adventurerEffect(state);
        -:  878:
    #####:  879:  case council_room:
    #####:  880:    return councilroomEffect(handPos, state);
        -:  881:
    #####:  882:  case feast:
        -:  883:    //gain card with cost up to 5
        -:  884:    //Backup hand
    #####:  885:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  886:    {
    #####:  887:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  888:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  889:    }
        -:  890:    //Backup hand
        -:  891:
        -:  892:    //Update Coins for Buy
    #####:  893:    updateCoins(currentPlayer, state, 5);
    #####:  894:    x = 1; //Condition to loop on
    #####:  895:    while (x == 1)
        -:  896:    { //Buy one card
    #####:  897:      if (supplyCount(choice1, state) <= 0)
        -:  898:      {
        -:  899:        if (DEBUG)
        -:  900:          printf("None of that card left, sorry!\n");
        -:  901:
        -:  902:        if (DEBUG)
        -:  903:        {
        -:  904:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  905:        }
        -:  906:      }
    #####:  907:      else if (state->coins < getCost(choice1))
        -:  908:      {
    #####:  909:        printf("That card is too expensive!\n");
        -:  910:
        -:  911:        if (DEBUG)
        -:  912:        {
        -:  913:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  914:        }
        -:  915:      }
        -:  916:      else
        -:  917:      {
        -:  918:
        -:  919:        if (DEBUG)
        -:  920:        {
        -:  921:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:        }
        -:  923:
    #####:  924:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  925:        x = 0;                                      //No more buying cards
        -:  926:
        -:  927:        if (DEBUG)
        -:  928:        {
        -:  929:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:        }
        -:  931:      }
        -:  932:    }
        -:  933:
        -:  934:    //Reset Hand
    #####:  935:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  936:    {
    #####:  937:      state->hand[currentPlayer][i] = temphand[i];
    #####:  938:      temphand[i] = -1;
        -:  939:    }
        -:  940:    //Reset Hand
        -:  941:
    #####:  942:    return 0;
        -:  943:
    #####:  944:  case gardens:
    #####:  945:    return -1;
        -:  946:
        4:  947:  case mine:
        4:  948:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  949:
        4:  950:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  951:    {
        2:  952:      return -1;
        -:  953:    }
        -:  954:
        2:  955:    if (choice2 > treasure_map || choice2 < curse)
        -:  956:    {
    #####:  957:      return -1;
        -:  958:    }
        -:  959:
        2:  960:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  961:    {
        1:  962:      return -1;
        -:  963:    }
        -:  964:
        1:  965:    gainCard(choice2, state, 2, currentPlayer);
        -:  966:
        -:  967:    //discard card from hand
        1:  968:    discardCard(handPos, currentPlayer, state, 0);
        -:  969:
        -:  970:    //discard trashed card
        5:  971:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  972:    {
        5:  973:      if (state->hand[currentPlayer][i] == j)
        -:  974:      {
        1:  975:        discardCard(i, currentPlayer, state, 0);
        1:  976:        break;
        -:  977:      }
        -:  978:    }
        -:  979:
        1:  980:    return 0;
        -:  981:
    #####:  982:  case remodel:
    #####:  983:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  984:
    #####:  985:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  986:    {
    #####:  987:      return -1;
        -:  988:    }
        -:  989:
    #####:  990:    gainCard(choice2, state, 0, currentPlayer);
        -:  991:
        -:  992:    //discard card from hand
    #####:  993:    discardCard(handPos, currentPlayer, state, 0);
        -:  994:
        -:  995:    //discard trashed card
    #####:  996:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  997:    {
    #####:  998:      if (state->hand[currentPlayer][i] == j)
        -:  999:      {
    #####: 1000:        discardCard(i, currentPlayer, state, 0);
    #####: 1001:        break;
        -: 1002:      }
        -: 1003:    }
        -: 1004:
    #####: 1005:    return 0;
        -: 1006:
    #####: 1007:  case smithy:
    #####: 1008:    return smithyEffect(handPos, state);
        -: 1009:
    #####: 1010:  case village:
    #####: 1011:    return villageEffect(handPos, state);
        -: 1012:
    #####: 1013:  case baron:
    #####: 1014:    state->numBuys++; //Increase buys by 1!
    #####: 1015:    if (choice1 > 0)
        -: 1016:    {                             //Boolean true or going to discard an estate
    #####: 1017:      int p = 0;                  //Iterator for hand!
    #####: 1018:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1019:      while (card_not_discarded)
        -: 1020:      {
    #####: 1021:        if (state->hand[currentPlayer][p] == estate)
        -: 1022:        {                    //Found an estate card!
    #####: 1023:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1024:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1025:          state->discardCount[currentPlayer]++;
    #####: 1026:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1027:          {
    #####: 1028:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1029:          }
    #####: 1030:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1031:          state->handCount[currentPlayer]--;
    #####: 1032:          card_not_discarded = 0; //Exit the loop
        -: 1033:        }
    #####: 1034:        else if (p > state->handCount[currentPlayer])
        -: 1035:        {
        -: 1036:          if (DEBUG)
        -: 1037:          {
        -: 1038:            printf("No estate cards in your hand, invalid choice\n");
        -: 1039:            printf("Must gain an estate if there are any\n");
        -: 1040:          }
    #####: 1041:          if (supplyCount(estate, state) > 0)
        -: 1042:          {
    #####: 1043:            gainCard(estate, state, 0, currentPlayer);
    #####: 1044:            state->supplyCount[estate]--; //Decrement estates
    #####: 1045:            if (supplyCount(estate, state) == 0)
        -: 1046:            {
    #####: 1047:              isGameOver(state);
        -: 1048:            }
        -: 1049:          }
    #####: 1050:          card_not_discarded = 0; //Exit the loop
        -: 1051:        }
        -: 1052:
        -: 1053:        else
        -: 1054:        {
    #####: 1055:          p++; //Next card
        -: 1056:        }
        -: 1057:      }
        -: 1058:    }
        -: 1059:
        -: 1060:    else
        -: 1061:    {
    #####: 1062:      if (supplyCount(estate, state) > 0)
        -: 1063:      {
    #####: 1064:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1065:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1066:        if (supplyCount(estate, state) == 0)
        -: 1067:        {
    #####: 1068:          isGameOver(state);
        -: 1069:        }
        -: 1070:      }
        -: 1071:    }
        -: 1072:
    #####: 1073:    return 0;
        -: 1074:
    #####: 1075:  case great_hall:
    #####: 1076:    return greathallEffect(handPos, state);
        -: 1077:
    #####: 1078:  case minion:
        -: 1079:    //+1 action
    #####: 1080:    state->numActions++;
        -: 1081:
        -: 1082:    //discard card from hand
    #####: 1083:    discardCard(handPos, currentPlayer, state, 0);
        -: 1084:
    #####: 1085:    if (choice1) //+2 coins
        -: 1086:    {
    #####: 1087:      state->coins = state->coins + 2;
        -: 1088:    }
        -: 1089:
    #####: 1090:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1091:    {
        -: 1092:      //discard hand
    #####: 1093:      while (numHandCards(state) > 0)
        -: 1094:      {
    #####: 1095:        discardCard(handPos, currentPlayer, state, 0);
        -: 1096:      }
        -: 1097:
        -: 1098:      //draw 4
    #####: 1099:      for (i = 0; i < 4; i++)
        -: 1100:      {
    #####: 1101:        drawCard(currentPlayer, state);
        -: 1102:      }
        -: 1103:
        -: 1104:      //other players discard hand and redraw if hand size > 4
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
        -: 1106:      {
    #####: 1107:        if (i != currentPlayer)
        -: 1108:        {
    #####: 1109:          if (state->handCount[i] > 4)
        -: 1110:          {
        -: 1111:            //discard hand
    #####: 1112:            while (state->handCount[i] > 0)
        -: 1113:            {
    #####: 1114:              discardCard(handPos, i, state, 0);
        -: 1115:            }
        -: 1116:
        -: 1117:            //draw 4
    #####: 1118:            for (j = 0; j < 4; j++)
        -: 1119:            {
    #####: 1120:              drawCard(i, state);
        -: 1121:            }
        -: 1122:          }
        -: 1123:        }
        -: 1124:      }
        -: 1125:    }
    #####: 1126:    return 0;
        -: 1127:
    #####: 1128:  case steward:
    #####: 1129:    if (choice1 == 1)
        -: 1130:    {
        -: 1131:      //+2 cards
    #####: 1132:      drawCard(currentPlayer, state);
    #####: 1133:      drawCard(currentPlayer, state);
        -: 1134:    }
    #####: 1135:    else if (choice1 == 2)
        -: 1136:    {
        -: 1137:      //+2 coins
    #####: 1138:      state->coins = state->coins + 2;
        -: 1139:    }
        -: 1140:    else
        -: 1141:    {
        -: 1142:      //trash 2 cards in hand
    #####: 1143:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:      discardCard(choice3, currentPlayer, state, 1);
        -: 1145:    }
        -: 1146:
        -: 1147:    //discard card from hand
    #####: 1148:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:    return 0;
        -: 1150:
    #####: 1151:  case tribute:
    #####: 1152:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1153:    {
    #####: 1154:      if (state->deckCount[nextPlayer] > 0)
        -: 1155:      {
    #####: 1156:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1157:        state->deckCount[nextPlayer]--;
        -: 1158:      }
    #####: 1159:      else if (state->discardCount[nextPlayer] > 0)
        -: 1160:      {
    #####: 1161:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1162:        state->discardCount[nextPlayer]--;
        -: 1163:      }
        -: 1164:      else
        -: 1165:      {
        -: 1166:        //No Card to Reveal
        -: 1167:        if (DEBUG)
        -: 1168:        {
        -: 1169:          printf("No cards to reveal\n");
        -: 1170:        }
        -: 1171:      }
        -: 1172:    }
        -: 1173:
        -: 1174:    else
        -: 1175:    {
    #####: 1176:      if (state->deckCount[nextPlayer] == 0)
        -: 1177:      {
    #####: 1178:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1179:        {
    #####: 1180:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1181:          state->deckCount[nextPlayer]++;
    #####: 1182:          state->discard[nextPlayer][i] = -1;
    #####: 1183:          state->discardCount[nextPlayer]--;
        -: 1184:        }
        -: 1185:
    #####: 1186:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1187:      }
    #####: 1188:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1189:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:      state->deckCount[nextPlayer]--;
    #####: 1191:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1192:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:      state->deckCount[nextPlayer]--;
        -: 1194:    }
        -: 1195:
    #####: 1196:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1197:    { //If we have a duplicate card, just drop one
    #####: 1198:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1199:      state->playedCardCount++;
    #####: 1200:      tributeRevealedCards[1] = -1;
        -: 1201:    }
        -: 1202:
    #####: 1203:    for (i = 0; i <= 2; i++)
        -: 1204:    {
    #####: 1205:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1206:      { //Treasure cards
    #####: 1207:        state->coins += 2;
        -: 1208:      }
        -: 1209:
    #####: 1210:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1211:      { //Victory Card Found
    #####: 1212:        drawCard(currentPlayer, state);
    #####: 1213:        drawCard(currentPlayer, state);
        -: 1214:      }
        -: 1215:      else
        -: 1216:      { //Action Card
    #####: 1217:        state->numActions = state->numActions + 2;
        -: 1218:      }
        -: 1219:    }
        -: 1220:
    #####: 1221:    return 0;
        -: 1222:
    #####: 1223:  case ambassador:
    #####: 1224:    j = 0; //used to check if player has enough cards to discard
        -: 1225:
    #####: 1226:    if (choice2 > 2 || choice2 < 0)
        -: 1227:    {
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:    if (choice1 == handPos)
        -: 1232:    {
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:
    #####: 1236:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:    {
    #####: 1238:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1239:      {
    #####: 1240:        j++;
        -: 1241:      }
        -: 1242:    }
    #####: 1243:    if (j < choice2)
        -: 1244:    {
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:
        -: 1248:    if (DEBUG)
        -: 1249:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1250:
        -: 1251:    //increase supply count for choosen card by amount being discarded
    #####: 1252:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1253:
        -: 1254:    //each other player gains a copy of revealed card
    #####: 1255:    for (i = 0; i < state->numPlayers; i++)
        -: 1256:    {
    #####: 1257:      if (i != currentPlayer)
        -: 1258:      {
    #####: 1259:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1260:      }
        -: 1261:    }
        -: 1262:
        -: 1263:    //discard played card from hand
    #####: 1264:    discardCard(handPos, currentPlayer, state, 0);
        -: 1265:
        -: 1266:    //trash copies of cards returned to supply
    #####: 1267:    for (j = 0; j < choice2; j++)
        -: 1268:    {
    #####: 1269:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:      {
    #####: 1271:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1272:        {
    #####: 1273:          discardCard(i, currentPlayer, state, 1);
    #####: 1274:          break;
        -: 1275:        }
        -: 1276:      }
        -: 1277:    }
        -: 1278:
    #####: 1279:    return 0;
        -: 1280:
    #####: 1281:  case cutpurse:
        -: 1282:
    #####: 1283:    updateCoins(currentPlayer, state, 2);
    #####: 1284:    for (i = 0; i < state->numPlayers; i++)
        -: 1285:    {
    #####: 1286:      if (i != currentPlayer)
        -: 1287:      {
    #####: 1288:        for (j = 0; j < state->handCount[i]; j++)
        -: 1289:        {
    #####: 1290:          if (state->hand[i][j] == copper)
        -: 1291:          {
    #####: 1292:            discardCard(j, i, state, 0);
    #####: 1293:            break;
        -: 1294:          }
    #####: 1295:          if (j == state->handCount[i])
        -: 1296:          {
    #####: 1297:            for (k = 0; k < state->handCount[i]; k++)
        -: 1298:            {
        -: 1299:              if (DEBUG)
        -: 1300:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1301:            }
    #####: 1302:            break;
        -: 1303:          }
        -: 1304:        }
        -: 1305:      }
        -: 1306:    }
        -: 1307:
        -: 1308:    //discard played card from hand
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0);
        -: 1310:
    #####: 1311:    return 0;
        -: 1312:
    #####: 1313:  case embargo:
        -: 1314:    //+2 Coins
    #####: 1315:    state->coins = state->coins + 2;
        -: 1316:
        -: 1317:    //see if selected pile is in play
    #####: 1318:    if (state->supplyCount[choice1] == -1)
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:    //add embargo token to selected supply pile
    #####: 1324:    state->embargoTokens[choice1]++;
        -: 1325:
        -: 1326:    //trash card
    #####: 1327:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1328:    return 0;
        -: 1329:
    #####: 1330:  case outpost:
        -: 1331:    //set outpost flag
    #####: 1332:    state->outpostPlayed++;
        -: 1333:
        -: 1334:    //discard card
    #####: 1335:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:    return 0;
        -: 1337:
    #####: 1338:  case salvager:
        -: 1339:    //+1 buy
    #####: 1340:    state->numBuys++;
        -: 1341:
    #####: 1342:    if (choice1)
        -: 1343:    {
        -: 1344:      //gain coins equal to trashed card
    #####: 1345:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1346:      //trash card
    #####: 1347:      discardCard(choice1, currentPlayer, state, 1);
        -: 1348:    }
        -: 1349:
        -: 1350:    //discard card
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1352:    return 0;
        -: 1353:
    #####: 1354:  case sea_hag:
    #####: 1355:    for (i = 0; i < state->numPlayers; i++)
        -: 1356:    {
    #####: 1357:      if (i != currentPlayer)
        -: 1358:      {
    #####: 1359:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1360:        state->deckCount[i]--;
    #####: 1361:        state->discardCount[i]++;
    #####: 1362:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1363:      }
        -: 1364:    }
    #####: 1365:    return 0;
        -: 1366:
    #####: 1367:  case treasure_map:
        -: 1368:    //search hand for another treasure_map
    #####: 1369:    index = -1;
    #####: 1370:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1371:    {
    #####: 1372:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1373:      {
    #####: 1374:        index = i;
    #####: 1375:        break;
        -: 1376:      }
        -: 1377:    }
    #####: 1378:    if (index > -1)
        -: 1379:    {
        -: 1380:      //trash both treasure cards
    #####: 1381:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1382:      discardCard(index, currentPlayer, state, 1);
        -: 1383:
        -: 1384:      //gain 4 Gold cards
    #####: 1385:      for (i = 0; i < 4; i++)
        -: 1386:      {
    #####: 1387:        gainCard(gold, state, 1, currentPlayer);
        -: 1388:      }
        -: 1389:
        -: 1390:      //return success
    #####: 1391:      return 1;
        -: 1392:    }
        -: 1393:
        -: 1394:    //no second treasure_map found in hand
    #####: 1395:    return -1;
        -: 1396:  }
        -: 1397:
    #####: 1398:  return -1;
        -: 1399:}
        -: 1400:
        2: 1401:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1402:{
        -: 1403:
        -: 1404:  //if card is not trashed, added to Played pile
        2: 1405:  if (trashFlag < 1)
        -: 1406:  {
        -: 1407:    //add card to played pile
        2: 1408:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1409:    state->playedCardCount++;
        -: 1410:  }
        -: 1411:
        -: 1412:  //set played card to -1
        2: 1413:  state->hand[currentPlayer][handPos] = -1;
        -: 1414:
        -: 1415:  //remove card from player's hand
        2: 1416:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1417:  {
        -: 1418:    //reduce number of cards in hand
        1: 1419:    state->handCount[currentPlayer]--;
        -: 1420:  }
        1: 1421:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1422:  {
        -: 1423:    //reduce number of cards in hand
    #####: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:  else
        -: 1427:  {
        -: 1428:    //replace discarded card with last card in hand
        1: 1429:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1430:    //set last card to -1
        1: 1431:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1432:    //reduce number of cards in hand
        1: 1433:    state->handCount[currentPlayer]--;
        -: 1434:  }
        -: 1435:
        2: 1436:  return 0;
        -: 1437:}
        -: 1438:
        1: 1439:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1440:{
        -: 1441:  //Note: supplyPos is enum of choosen card
        -: 1442:
        -: 1443:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1444:  if (supplyCount(supplyPos, state) < 1)
        -: 1445:  {
    #####: 1446:    return -1;
        -: 1447:  }
        -: 1448:
        -: 1449:  //added card for [whoseTurn] current player:
        -: 1450:  // toFlag = 0 : add to discard
        -: 1451:  // toFlag = 1 : add to deck
        -: 1452:  // toFlag = 2 : add to hand
        -: 1453:
        1: 1454:  if (toFlag == 1)
        -: 1455:  {
    #####: 1456:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1457:    state->deckCount[player]++;
        -: 1458:  }
        1: 1459:  else if (toFlag == 2)
        -: 1460:  {
        1: 1461:    state->hand[player][state->handCount[player]] = supplyPos;
        1: 1462:    state->handCount[player]++;
        -: 1463:  }
        -: 1464:  else
        -: 1465:  {
    #####: 1466:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1467:    state->discardCount[player]++;
        -: 1468:  }
        -: 1469:
        -: 1470:  //decrease number in supply pile
        1: 1471:  state->supplyCount[supplyPos]--;
        -: 1472:
        1: 1473:  return 0;
        -: 1474:}
        -: 1475:
        1: 1476:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1477:{
        -: 1478:  int i;
        -: 1479:
        -: 1480:  //reset coin count
        1: 1481:  state->coins = 0;
        -: 1482:
        -: 1483:  //add coins for each Treasure card in player's hand
        6: 1484:  for (i = 0; i < state->handCount[player]; i++)
        -: 1485:  {
        5: 1486:    if (state->hand[player][i] == copper)
        -: 1487:    {
        4: 1488:      state->coins += 1;
        -: 1489:    }
        1: 1490:    else if (state->hand[player][i] == silver)
        -: 1491:    {
    #####: 1492:      state->coins += 2;
        -: 1493:    }
        1: 1494:    else if (state->hand[player][i] == gold)
        -: 1495:    {
    #####: 1496:      state->coins += 3;
        -: 1497:    }
        -: 1498:  }
        -: 1499:
        -: 1500:  //add bonus
        1: 1501:  state->coins += bonus;
        -: 1502:
        1: 1503:  return 0;
        -: 1504:}
        -: 1505:
        -: 1506://end of dominion.c
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void *a, const void *b)
        -:    9:{
       30:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       30:   12:  if (*(int *)a < *(int *)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
        1:   17:struct gameState *newGame()
        -:   18:{
        1:   19:  struct gameState *g = malloc(sizeof(struct gameState));
        1:   20:  return g;
        -:   21:}
        -:   22:
        1:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
        1:   26:  int *k = malloc(10 * sizeof(int));
        1:   27:  k[0] = k1;
        1:   28:  k[1] = k2;
        1:   29:  k[2] = k3;
        1:   30:  k[3] = k4;
        1:   31:  k[4] = k5;
        1:   32:  k[5] = k6;
        1:   33:  k[6] = k7;
        1:   34:  k[7] = k8;
        1:   35:  k[8] = k9;
        1:   36:  k[9] = k10;
        1:   37:  return k;
        -:   38:}
        -:   39:
        1:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        1:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       11:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      110:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       21:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      214:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      197:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
        3:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
    #####:  118:          if (numPlayers == 2)
        -:  119:          {
    #####:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
        3:  129:          state->supplyCount[i] = 10;
        -:  130:        }
        3:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      194:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        3:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
        8:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        -:  151:    }
       16:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        3:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        3:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       28:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
        6:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       20:  223:    card = floor(Random() * state->deckCount[player]);
       20:  224:    newDeck[newDeckPos] = state->deck[player][card];
       20:  225:    newDeckPos++;
       67:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
       47:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       20:  230:    state->deckCount[player]--;
        -:  231:  }
       22:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       20:  234:    state->deck[player][i] = newDeck[i];
       20:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        2:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        1:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        1:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        4:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        4:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        5:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
        5:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
        5:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
        5:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
        5:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
        5:  672:    state->deckCount[player]--;
        5:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
        5:  676:  return 0;
        -:  677:}
        -:  678:
        4:  679:int getCost(int cardNumber)
        -:  680:{
        4:  681:  switch (cardNumber)
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
        2:  691:  case copper:
        2:  692:    return 0;
        1:  693:  case silver:
        1:  694:    return 3;
        1:  695:  case gold:
        1:  696:    return 6;
    #####:  697:  case adventurer:
    #####:  698:    return 6;
    #####:  699:  case council_room:
    #####:  700:    return 5;
    #####:  701:  case feast:
    #####:  702:    return 4;
    #####:  703:  case gardens:
    #####:  704:    return 4;
    #####:  705:  case mine:
    #####:  706:    return 5;
    #####:  707:  case remodel:
    #####:  708:    return 4;
    #####:  709:  case smithy:
    #####:  710:    return 4;
    #####:  711:  case village:
    #####:  712:    return 3;
    #####:  713:  case baron:
    #####:  714:    return 4;
    #####:  715:  case great_hall:
    #####:  716:    return 3;
    #####:  717:  case minion:
    #####:  718:    return 5;
    #####:  719:  case steward:
    #####:  720:    return 3;
    #####:  721:  case tribute:
    #####:  722:    return 5;
    #####:  723:  case ambassador:
    #####:  724:    return 3;
    #####:  725:  case cutpurse:
    #####:  726:    return 4;
    #####:  727:  case embargo:
    #####:  728:    return 2;
    #####:  729:  case outpost:
    #####:  730:    return 5;
    #####:  731:  case salvager:
    #####:  732:    return 4;
    #####:  733:  case sea_hag:
    #####:  734:    return 4;
    #####:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int smithyEffect(int handPos, struct gameState *state)
        -:  743:{
    #####:  744:  int currentPlayer = whoseTurn(state);
        -:  745:  int i;
        -:  746:
        -:  747:  //+3 Cards
    #####:  748:  for (i = 0; i < 3; i++)
        -:  749:  {
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:  }
        -:  752:
        -:  753:  //discard card from hand
    #####:  754:  discardCard(handPos--, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int adventurerEffect(struct gameState *state)
        -:  759:{
    #####:  760:  int drawntreasure = 0;
    #####:  761:  int currentPlayer = whoseTurn(state);
        -:  762:  int cardDrawn;
        -:  763:  int temphand[MAX_HAND];
    #####:  764:  int z = 0;
        -:  765:
    #####:  766:  while (drawntreasure < 2)
        -:  767:  {
    #####:  768:    if (state->deckCount[currentPlayer] < 1)
        -:  769:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  770:      shuffle(currentPlayer, state);
        -:  771:    }
    #####:  772:    drawCard(currentPlayer, state);
    #####:  773:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####:  774:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  775:      drawntreasure++;
        -:  776:    else
        -:  777:    {
    #####:  778:      temphand[z] = cardDrawn;
    #####:  779:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  780:      z++;
        -:  781:    }
        -:  782:  }
    #####:  783:  while (z - 1 >= 0)
        -:  784:  {
    #####:  785:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  786:    z = z - 1;
        -:  787:  }
    #####:  788:  return 0;
        -:  789:}
        -:  790:
    #####:  791:int villageEffect(int handPos, struct gameState *state)
        -:  792:{
    #####:  793:  int currentPlayer = whoseTurn(state);
        -:  794:
        -:  795:  //+1 Card
    #####:  796:  drawCard(currentPlayer, state);
        -:  797:
        -:  798:  //+2 Actions
    #####:  799:  state->numActions = state->numActions + 2;
        -:  800:
        -:  801:  //discard played card from hand
    #####:  802:  discardCard(handPos, currentPlayer, state, 0);
    #####:  803:  return 0;
        -:  804:}
        -:  805:
    #####:  806:int greathallEffect(int handPos, struct gameState *state)
        -:  807:{
    #####:  808:  int currentPlayer = whoseTurn(state);
        -:  809:  //printf("prev state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
        -:  810:  //+1 Card
    #####:  811:  drawCard(currentPlayer, state);
        -:  812:
        -:  813:  //+1 Actions
    #####:  814:  state->numActions++;
        -:  815:
        -:  816:  //discard card from hand
    #####:  817:  discardCard(handPos, currentPlayer, state, 0);
        -:  818:  // printf("post state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
    #####:  819:  return 0;
        -:  820:}
        -:  821:
    #####:  822:int councilroomEffect(int handPos, struct gameState *state)
        -:  823:{
        -:  824:  int i;
    #####:  825:  int currentPlayer = whoseTurn(state);
        -:  826:  //+4 Cards
    #####:  827:  for (i = 0; i < 4; i++)
        -:  828:  {
    #####:  829:    drawCard(currentPlayer, state);
        -:  830:  }
        -:  831:
        -:  832:  //+1 Buy
    #####:  833:  state->numBuys++;
        -:  834:
        -:  835:  //Each other player draws a card
    #####:  836:  for (i = 0; i < state->numPlayers; i++)
        -:  837:  {
    #####:  838:    if (i != currentPlayer)
        -:  839:    {
    #####:  840:      drawCard(i, state);
        -:  841:    }
        -:  842:  }
        -:  843:
        -:  844:  //put played card in played card pile
    #####:  845:  discardCard(handPos, currentPlayer, state, 0);
        -:  846:
    #####:  847:  return 0;
        -:  848:}
        -:  849:
        4:  850:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  851:{
        -:  852:  int i;
        -:  853:  int j;
        -:  854:  int k;
        -:  855:  int x;
        -:  856:  int index;
        4:  857:  int currentPlayer = whoseTurn(state);
        4:  858:  int nextPlayer = currentPlayer + 1;
        -:  859:
        4:  860:  int tributeRevealedCards[2] = {-1, -1};
        -:  861:  int temphand[MAX_HAND]; // moved above the if statement
        4:  862:  int drawntreasure = 0;
        -:  863:  int cardDrawn;
        4:  864:  int z = 0; // this is the counter for the temp hand
        4:  865:  if (nextPlayer > (state->numPlayers - 1))
        -:  866:  {
    #####:  867:    nextPlayer = 0;
        -:  868:  }
        4:  869:  if (card == great_hall)
        -:  870:  {
    #####:  871:    printf("great_hall\n");
        -:  872:  }
        -:  873:  //uses switch to select card and perform actions
        4:  874:  switch (card)
        -:  875:  {
    #####:  876:  case adventurer:
    #####:  877:    return adventurerEffect(state);
        -:  878:
    #####:  879:  case council_room:
    #####:  880:    return councilroomEffect(handPos, state);
        -:  881:
    #####:  882:  case feast:
        -:  883:    //gain card with cost up to 5
        -:  884:    //Backup hand
    #####:  885:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  886:    {
    #####:  887:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  888:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  889:    }
        -:  890:    //Backup hand
        -:  891:
        -:  892:    //Update Coins for Buy
    #####:  893:    updateCoins(currentPlayer, state, 5);
    #####:  894:    x = 1; //Condition to loop on
    #####:  895:    while (x == 1)
        -:  896:    { //Buy one card
    #####:  897:      if (supplyCount(choice1, state) <= 0)
        -:  898:      {
        -:  899:        if (DEBUG)
        -:  900:          printf("None of that card left, sorry!\n");
        -:  901:
        -:  902:        if (DEBUG)
        -:  903:        {
        -:  904:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  905:        }
        -:  906:      }
    #####:  907:      else if (state->coins < getCost(choice1))
        -:  908:      {
    #####:  909:        printf("That card is too expensive!\n");
        -:  910:
        -:  911:        if (DEBUG)
        -:  912:        {
        -:  913:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  914:        }
        -:  915:      }
        -:  916:      else
        -:  917:      {
        -:  918:
        -:  919:        if (DEBUG)
        -:  920:        {
        -:  921:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:        }
        -:  923:
    #####:  924:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  925:        x = 0;                                      //No more buying cards
        -:  926:
        -:  927:        if (DEBUG)
        -:  928:        {
        -:  929:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:        }
        -:  931:      }
        -:  932:    }
        -:  933:
        -:  934:    //Reset Hand
    #####:  935:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  936:    {
    #####:  937:      state->hand[currentPlayer][i] = temphand[i];
    #####:  938:      temphand[i] = -1;
        -:  939:    }
        -:  940:    //Reset Hand
        -:  941:
    #####:  942:    return 0;
        -:  943:
    #####:  944:  case gardens:
    #####:  945:    return -1;
        -:  946:
        4:  947:  case mine:
        4:  948:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  949:
        4:  950:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  951:    {
        2:  952:      return -1;
        -:  953:    }
        -:  954:
        2:  955:    if (choice2 > treasure_map || choice2 < curse)
        -:  956:    {
    #####:  957:      return -1;
        -:  958:    }
        -:  959:
        2:  960:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  961:    {
        1:  962:      return -1;
        -:  963:    }
        -:  964:
        1:  965:    gainCard(choice2, state, 2, currentPlayer);
        -:  966:
        -:  967:    //discard card from hand
        1:  968:    discardCard(handPos, currentPlayer, state, 0);
        -:  969:
        -:  970:    //discard trashed card
        5:  971:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  972:    {
        5:  973:      if (state->hand[currentPlayer][i] == j)
        -:  974:      {
        1:  975:        discardCard(i, currentPlayer, state, 0);
        1:  976:        break;
        -:  977:      }
        -:  978:    }
        -:  979:
        1:  980:    return 0;
        -:  981:
    #####:  982:  case remodel:
    #####:  983:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  984:
    #####:  985:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  986:    {
    #####:  987:      return -1;
        -:  988:    }
        -:  989:
    #####:  990:    gainCard(choice2, state, 0, currentPlayer);
        -:  991:
        -:  992:    //discard card from hand
    #####:  993:    discardCard(handPos, currentPlayer, state, 0);
        -:  994:
        -:  995:    //discard trashed card
    #####:  996:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  997:    {
    #####:  998:      if (state->hand[currentPlayer][i] == j)
        -:  999:      {
    #####: 1000:        discardCard(i, currentPlayer, state, 0);
    #####: 1001:        break;
        -: 1002:      }
        -: 1003:    }
        -: 1004:
    #####: 1005:    return 0;
        -: 1006:
    #####: 1007:  case smithy:
    #####: 1008:    return smithyEffect(handPos, state);
        -: 1009:
    #####: 1010:  case village:
    #####: 1011:    return villageEffect(handPos, state);
        -: 1012:
    #####: 1013:  case baron:
    #####: 1014:    state->numBuys++; //Increase buys by 1!
    #####: 1015:    if (choice1 > 0)
        -: 1016:    {                             //Boolean true or going to discard an estate
    #####: 1017:      int p = 0;                  //Iterator for hand!
    #####: 1018:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1019:      while (card_not_discarded)
        -: 1020:      {
    #####: 1021:        if (state->hand[currentPlayer][p] == estate)
        -: 1022:        {                    //Found an estate card!
    #####: 1023:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1024:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1025:          state->discardCount[currentPlayer]++;
    #####: 1026:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1027:          {
    #####: 1028:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1029:          }
    #####: 1030:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1031:          state->handCount[currentPlayer]--;
    #####: 1032:          card_not_discarded = 0; //Exit the loop
        -: 1033:        }
    #####: 1034:        else if (p > state->handCount[currentPlayer])
        -: 1035:        {
        -: 1036:          if (DEBUG)
        -: 1037:          {
        -: 1038:            printf("No estate cards in your hand, invalid choice\n");
        -: 1039:            printf("Must gain an estate if there are any\n");
        -: 1040:          }
    #####: 1041:          if (supplyCount(estate, state) > 0)
        -: 1042:          {
    #####: 1043:            gainCard(estate, state, 0, currentPlayer);
    #####: 1044:            state->supplyCount[estate]--; //Decrement estates
    #####: 1045:            if (supplyCount(estate, state) == 0)
        -: 1046:            {
    #####: 1047:              isGameOver(state);
        -: 1048:            }
        -: 1049:          }
    #####: 1050:          card_not_discarded = 0; //Exit the loop
        -: 1051:        }
        -: 1052:
        -: 1053:        else
        -: 1054:        {
    #####: 1055:          p++; //Next card
        -: 1056:        }
        -: 1057:      }
        -: 1058:    }
        -: 1059:
        -: 1060:    else
        -: 1061:    {
    #####: 1062:      if (supplyCount(estate, state) > 0)
        -: 1063:      {
    #####: 1064:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1065:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1066:        if (supplyCount(estate, state) == 0)
        -: 1067:        {
    #####: 1068:          isGameOver(state);
        -: 1069:        }
        -: 1070:      }
        -: 1071:    }
        -: 1072:
    #####: 1073:    return 0;
        -: 1074:
    #####: 1075:  case great_hall:
    #####: 1076:    return greathallEffect(handPos, state);
        -: 1077:
    #####: 1078:  case minion:
        -: 1079:    //+1 action
    #####: 1080:    state->numActions++;
        -: 1081:
        -: 1082:    //discard card from hand
    #####: 1083:    discardCard(handPos, currentPlayer, state, 0);
        -: 1084:
    #####: 1085:    if (choice1) //+2 coins
        -: 1086:    {
    #####: 1087:      state->coins = state->coins + 2;
        -: 1088:    }
        -: 1089:
    #####: 1090:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1091:    {
        -: 1092:      //discard hand
    #####: 1093:      while (numHandCards(state) > 0)
        -: 1094:      {
    #####: 1095:        discardCard(handPos, currentPlayer, state, 0);
        -: 1096:      }
        -: 1097:
        -: 1098:      //draw 4
    #####: 1099:      for (i = 0; i < 4; i++)
        -: 1100:      {
    #####: 1101:        drawCard(currentPlayer, state);
        -: 1102:      }
        -: 1103:
        -: 1104:      //other players discard hand and redraw if hand size > 4
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
        -: 1106:      {
    #####: 1107:        if (i != currentPlayer)
        -: 1108:        {
    #####: 1109:          if (state->handCount[i] > 4)
        -: 1110:          {
        -: 1111:            //discard hand
    #####: 1112:            while (state->handCount[i] > 0)
        -: 1113:            {
    #####: 1114:              discardCard(handPos, i, state, 0);
        -: 1115:            }
        -: 1116:
        -: 1117:            //draw 4
    #####: 1118:            for (j = 0; j < 4; j++)
        -: 1119:            {
    #####: 1120:              drawCard(i, state);
        -: 1121:            }
        -: 1122:          }
        -: 1123:        }
        -: 1124:      }
        -: 1125:    }
    #####: 1126:    return 0;
        -: 1127:
    #####: 1128:  case steward:
    #####: 1129:    if (choice1 == 1)
        -: 1130:    {
        -: 1131:      //+2 cards
    #####: 1132:      drawCard(currentPlayer, state);
    #####: 1133:      drawCard(currentPlayer, state);
        -: 1134:    }
    #####: 1135:    else if (choice1 == 2)
        -: 1136:    {
        -: 1137:      //+2 coins
    #####: 1138:      state->coins = state->coins + 2;
        -: 1139:    }
        -: 1140:    else
        -: 1141:    {
        -: 1142:      //trash 2 cards in hand
    #####: 1143:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:      discardCard(choice3, currentPlayer, state, 1);
        -: 1145:    }
        -: 1146:
        -: 1147:    //discard card from hand
    #####: 1148:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:    return 0;
        -: 1150:
    #####: 1151:  case tribute:
    #####: 1152:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1153:    {
    #####: 1154:      if (state->deckCount[nextPlayer] > 0)
        -: 1155:      {
    #####: 1156:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1157:        state->deckCount[nextPlayer]--;
        -: 1158:      }
    #####: 1159:      else if (state->discardCount[nextPlayer] > 0)
        -: 1160:      {
    #####: 1161:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1162:        state->discardCount[nextPlayer]--;
        -: 1163:      }
        -: 1164:      else
        -: 1165:      {
        -: 1166:        //No Card to Reveal
        -: 1167:        if (DEBUG)
        -: 1168:        {
        -: 1169:          printf("No cards to reveal\n");
        -: 1170:        }
        -: 1171:      }
        -: 1172:    }
        -: 1173:
        -: 1174:    else
        -: 1175:    {
    #####: 1176:      if (state->deckCount[nextPlayer] == 0)
        -: 1177:      {
    #####: 1178:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1179:        {
    #####: 1180:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1181:          state->deckCount[nextPlayer]++;
    #####: 1182:          state->discard[nextPlayer][i] = -1;
    #####: 1183:          state->discardCount[nextPlayer]--;
        -: 1184:        }
        -: 1185:
    #####: 1186:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1187:      }
    #####: 1188:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1189:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:      state->deckCount[nextPlayer]--;
    #####: 1191:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1192:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:      state->deckCount[nextPlayer]--;
        -: 1194:    }
        -: 1195:
    #####: 1196:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1197:    { //If we have a duplicate card, just drop one
    #####: 1198:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1199:      state->playedCardCount++;
    #####: 1200:      tributeRevealedCards[1] = -1;
        -: 1201:    }
        -: 1202:
    #####: 1203:    for (i = 0; i <= 2; i++)
        -: 1204:    {
    #####: 1205:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1206:      { //Treasure cards
    #####: 1207:        state->coins += 2;
        -: 1208:      }
        -: 1209:
    #####: 1210:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1211:      { //Victory Card Found
    #####: 1212:        drawCard(currentPlayer, state);
    #####: 1213:        drawCard(currentPlayer, state);
        -: 1214:      }
        -: 1215:      else
        -: 1216:      { //Action Card
    #####: 1217:        state->numActions = state->numActions + 2;
        -: 1218:      }
        -: 1219:    }
        -: 1220:
    #####: 1221:    return 0;
        -: 1222:
    #####: 1223:  case ambassador:
    #####: 1224:    j = 0; //used to check if player has enough cards to discard
        -: 1225:
    #####: 1226:    if (choice2 > 2 || choice2 < 0)
        -: 1227:    {
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:    if (choice1 == handPos)
        -: 1232:    {
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:
    #####: 1236:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:    {
    #####: 1238:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1239:      {
    #####: 1240:        j++;
        -: 1241:      }
        -: 1242:    }
    #####: 1243:    if (j < choice2)
        -: 1244:    {
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:
        -: 1248:    if (DEBUG)
        -: 1249:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1250:
        -: 1251:    //increase supply count for choosen card by amount being discarded
    #####: 1252:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1253:
        -: 1254:    //each other player gains a copy of revealed card
    #####: 1255:    for (i = 0; i < state->numPlayers; i++)
        -: 1256:    {
    #####: 1257:      if (i != currentPlayer)
        -: 1258:      {
    #####: 1259:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1260:      }
        -: 1261:    }
        -: 1262:
        -: 1263:    //discard played card from hand
    #####: 1264:    discardCard(handPos, currentPlayer, state, 0);
        -: 1265:
        -: 1266:    //trash copies of cards returned to supply
    #####: 1267:    for (j = 0; j < choice2; j++)
        -: 1268:    {
    #####: 1269:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:      {
    #####: 1271:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1272:        {
    #####: 1273:          discardCard(i, currentPlayer, state, 1);
    #####: 1274:          break;
        -: 1275:        }
        -: 1276:      }
        -: 1277:    }
        -: 1278:
    #####: 1279:    return 0;
        -: 1280:
    #####: 1281:  case cutpurse:
        -: 1282:
    #####: 1283:    updateCoins(currentPlayer, state, 2);
    #####: 1284:    for (i = 0; i < state->numPlayers; i++)
        -: 1285:    {
    #####: 1286:      if (i != currentPlayer)
        -: 1287:      {
    #####: 1288:        for (j = 0; j < state->handCount[i]; j++)
        -: 1289:        {
    #####: 1290:          if (state->hand[i][j] == copper)
        -: 1291:          {
    #####: 1292:            discardCard(j, i, state, 0);
    #####: 1293:            break;
        -: 1294:          }
    #####: 1295:          if (j == state->handCount[i])
        -: 1296:          {
    #####: 1297:            for (k = 0; k < state->handCount[i]; k++)
        -: 1298:            {
        -: 1299:              if (DEBUG)
        -: 1300:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1301:            }
    #####: 1302:            break;
        -: 1303:          }
        -: 1304:        }
        -: 1305:      }
        -: 1306:    }
        -: 1307:
        -: 1308:    //discard played card from hand
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0);
        -: 1310:
    #####: 1311:    return 0;
        -: 1312:
    #####: 1313:  case embargo:
        -: 1314:    //+2 Coins
    #####: 1315:    state->coins = state->coins + 2;
        -: 1316:
        -: 1317:    //see if selected pile is in play
    #####: 1318:    if (state->supplyCount[choice1] == -1)
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:    //add embargo token to selected supply pile
    #####: 1324:    state->embargoTokens[choice1]++;
        -: 1325:
        -: 1326:    //trash card
    #####: 1327:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1328:    return 0;
        -: 1329:
    #####: 1330:  case outpost:
        -: 1331:    //set outpost flag
    #####: 1332:    state->outpostPlayed++;
        -: 1333:
        -: 1334:    //discard card
    #####: 1335:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:    return 0;
        -: 1337:
    #####: 1338:  case salvager:
        -: 1339:    //+1 buy
    #####: 1340:    state->numBuys++;
        -: 1341:
    #####: 1342:    if (choice1)
        -: 1343:    {
        -: 1344:      //gain coins equal to trashed card
    #####: 1345:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1346:      //trash card
    #####: 1347:      discardCard(choice1, currentPlayer, state, 1);
        -: 1348:    }
        -: 1349:
        -: 1350:    //discard card
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1352:    return 0;
        -: 1353:
    #####: 1354:  case sea_hag:
    #####: 1355:    for (i = 0; i < state->numPlayers; i++)
        -: 1356:    {
    #####: 1357:      if (i != currentPlayer)
        -: 1358:      {
    #####: 1359:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1360:        state->deckCount[i]--;
    #####: 1361:        state->discardCount[i]++;
    #####: 1362:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1363:      }
        -: 1364:    }
    #####: 1365:    return 0;
        -: 1366:
    #####: 1367:  case treasure_map:
        -: 1368:    //search hand for another treasure_map
    #####: 1369:    index = -1;
    #####: 1370:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1371:    {
    #####: 1372:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1373:      {
    #####: 1374:        index = i;
    #####: 1375:        break;
        -: 1376:      }
        -: 1377:    }
    #####: 1378:    if (index > -1)
        -: 1379:    {
        -: 1380:      //trash both treasure cards
    #####: 1381:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1382:      discardCard(index, currentPlayer, state, 1);
        -: 1383:
        -: 1384:      //gain 4 Gold cards
    #####: 1385:      for (i = 0; i < 4; i++)
        -: 1386:      {
    #####: 1387:        gainCard(gold, state, 1, currentPlayer);
        -: 1388:      }
        -: 1389:
        -: 1390:      //return success
    #####: 1391:      return 1;
        -: 1392:    }
        -: 1393:
        -: 1394:    //no second treasure_map found in hand
    #####: 1395:    return -1;
        -: 1396:  }
        -: 1397:
    #####: 1398:  return -1;
        -: 1399:}
        -: 1400:
        2: 1401:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1402:{
        -: 1403:
        -: 1404:  //if card is not trashed, added to Played pile
        2: 1405:  if (trashFlag < 1)
        -: 1406:  {
        -: 1407:    //add card to played pile
        2: 1408:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1409:    state->playedCardCount++;
        -: 1410:  }
        -: 1411:
        -: 1412:  //set played card to -1
        2: 1413:  state->hand[currentPlayer][handPos] = -1;
        -: 1414:
        -: 1415:  //remove card from player's hand
        2: 1416:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1417:  {
        -: 1418:    //reduce number of cards in hand
        1: 1419:    state->handCount[currentPlayer]--;
        -: 1420:  }
        1: 1421:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1422:  {
        -: 1423:    //reduce number of cards in hand
    #####: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:  else
        -: 1427:  {
        -: 1428:    //replace discarded card with last card in hand
        1: 1429:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1430:    //set last card to -1
        1: 1431:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1432:    //reduce number of cards in hand
        1: 1433:    state->handCount[currentPlayer]--;
        -: 1434:  }
        -: 1435:
        2: 1436:  return 0;
        -: 1437:}
        -: 1438:
        1: 1439:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1440:{
        -: 1441:  //Note: supplyPos is enum of choosen card
        -: 1442:
        -: 1443:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1444:  if (supplyCount(supplyPos, state) < 1)
        -: 1445:  {
    #####: 1446:    return -1;
        -: 1447:  }
        -: 1448:
        -: 1449:  //added card for [whoseTurn] current player:
        -: 1450:  // toFlag = 0 : add to discard
        -: 1451:  // toFlag = 1 : add to deck
        -: 1452:  // toFlag = 2 : add to hand
        -: 1453:
        1: 1454:  if (toFlag == 1)
        -: 1455:  {
    #####: 1456:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1457:    state->deckCount[player]++;
        -: 1458:  }
        1: 1459:  else if (toFlag == 2)
        -: 1460:  {
        1: 1461:    state->hand[player][state->handCount[player]] = supplyPos;
        1: 1462:    state->handCount[player]++;
        -: 1463:  }
        -: 1464:  else
        -: 1465:  {
    #####: 1466:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1467:    state->discardCount[player]++;
        -: 1468:  }
        -: 1469:
        -: 1470:  //decrease number in supply pile
        1: 1471:  state->supplyCount[supplyPos]--;
        -: 1472:
        1: 1473:  return 0;
        -: 1474:}
        -: 1475:
        1: 1476:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1477:{
        -: 1478:  int i;
        -: 1479:
        -: 1480:  //reset coin count
        1: 1481:  state->coins = 0;
        -: 1482:
        -: 1483:  //add coins for each Treasure card in player's hand
        6: 1484:  for (i = 0; i < state->handCount[player]; i++)
        -: 1485:  {
        5: 1486:    if (state->hand[player][i] == copper)
        -: 1487:    {
        4: 1488:      state->coins += 1;
        -: 1489:    }
        1: 1490:    else if (state->hand[player][i] == silver)
        -: 1491:    {
    #####: 1492:      state->coins += 2;
        -: 1493:    }
        1: 1494:    else if (state->hand[player][i] == gold)
        -: 1495:    {
    #####: 1496:      state->coins += 3;
        -: 1497:    }
        -: 1498:  }
        -: 1499:
        -: 1500:  //add bonus
        1: 1501:  state->coins += bonus;
        -: 1502:
        1: 1503:  return 0;
        -: 1504:}
        -: 1505:
        -: 1506://end of dominion.c
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void *a, const void *b)
        -:    9:{
       30:   10:  if (*(int *)a > *(int *)b)
    #####:   11:    return 1;
       30:   12:  if (*(int *)a < *(int *)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
        1:   17:struct gameState *newGame()
        -:   18:{
        1:   19:  struct gameState *g = malloc(sizeof(struct gameState));
        1:   20:  return g;
        -:   21:}
        -:   22:
        1:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
        1:   26:  int *k = malloc(10 * sizeof(int));
        1:   27:  k[0] = k1;
        1:   28:  k[1] = k2;
        1:   29:  k[2] = k3;
        1:   30:  k[3] = k4;
        1:   31:  k[4] = k5;
        1:   32:  k[5] = k6;
        1:   33:  k[6] = k7;
        1:   34:  k[7] = k8;
        1:   35:  k[8] = k9;
        1:   36:  k[9] = k10;
        1:   37:  return k;
        -:   38:}
        -:   39:
        1:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
        1:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       11:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
      110:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
      100:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        1:   76:  if (numPlayers == 2)
        -:   77:  {
        1:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
        1:   90:  if (numPlayers == 2)
        -:   91:  {
        1:   92:    state->supplyCount[estate] = 8;
        1:   93:    state->supplyCount[duchy] = 8;
        1:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
        1:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  105:  state->supplyCount[silver] = 40;
        1:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       21:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
      214:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
      197:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
        3:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
    #####:  118:          if (numPlayers == 2)
        -:  119:          {
    #####:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
        3:  129:          state->supplyCount[i] = 10;
        -:  130:        }
        3:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
      194:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
        3:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
        2:  146:    state->deckCount[i] = 0;
        8:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
        6:  149:      state->deck[i][j] = estate;
        6:  150:      state->deckCount[i]++;
        -:  151:    }
       16:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
       14:  154:      state->deck[i][j] = copper;
       14:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
        3:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
        2:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
        3:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
        2:  172:    state->handCount[i] = 0;
        2:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
       28:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
       27:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
        1:  188:  state->outpostPlayed = 0;
        1:  189:  state->phase = 0;
        1:  190:  state->numActions = 1;
        1:  191:  state->numBuys = 1;
        1:  192:  state->playedCardCount = 0;
        1:  193:  state->whoseTurn = 0;
        1:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
        6:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
        5:  200:    drawCard(state->whoseTurn, state);
        -:  201:  }
        -:  202:
        1:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
        1:  205:  return 0;
        -:  206:}
        -:  207:
        2:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
        2:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
        2:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
        2:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
       24:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
       20:  223:    card = floor(Random() * state->deckCount[player]);
       20:  224:    newDeck[newDeckPos] = state->deck[player][card];
       20:  225:    newDeckPos++;
       67:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
       47:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
       20:  230:    state->deckCount[player]--;
        -:  231:  }
       22:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
       20:  234:    state->deck[player][i] = newDeck[i];
       20:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
        2:  238:  return 0;
        -:  239:}
        -:  240:
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
    #####:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
        -:  328:}
        -:  329:
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        1:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
        1:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        4:  372:int whoseTurn(struct gameState *state)
        -:  373:{
        4:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
    #####:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
        -:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
        -:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
        -:  539:    };
        -:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        5:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
        5:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
    #####:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
    #####:  626:      state->deck[player][i] = state->discard[player][i];
    #####:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
    #####:  630:    state->deckCount[player] = state->discardCount[player];
    #####:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    #####:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    #####:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    #####:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    #####:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    #####:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    #####:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    #####:  657:    state->deckCount[player]--;
    #####:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
        5:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
        5:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
        5:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
        5:  672:    state->deckCount[player]--;
        5:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
        5:  676:  return 0;
        -:  677:}
        -:  678:
        4:  679:int getCost(int cardNumber)
        -:  680:{
        4:  681:  switch (cardNumber)
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
        2:  691:  case copper:
        2:  692:    return 0;
        1:  693:  case silver:
        1:  694:    return 3;
        1:  695:  case gold:
        1:  696:    return 6;
    #####:  697:  case adventurer:
    #####:  698:    return 6;
    #####:  699:  case council_room:
    #####:  700:    return 5;
    #####:  701:  case feast:
    #####:  702:    return 4;
    #####:  703:  case gardens:
    #####:  704:    return 4;
    #####:  705:  case mine:
    #####:  706:    return 5;
    #####:  707:  case remodel:
    #####:  708:    return 4;
    #####:  709:  case smithy:
    #####:  710:    return 4;
    #####:  711:  case village:
    #####:  712:    return 3;
    #####:  713:  case baron:
    #####:  714:    return 4;
    #####:  715:  case great_hall:
    #####:  716:    return 3;
    #####:  717:  case minion:
    #####:  718:    return 5;
    #####:  719:  case steward:
    #####:  720:    return 3;
    #####:  721:  case tribute:
    #####:  722:    return 5;
    #####:  723:  case ambassador:
    #####:  724:    return 3;
    #####:  725:  case cutpurse:
    #####:  726:    return 4;
    #####:  727:  case embargo:
    #####:  728:    return 2;
    #####:  729:  case outpost:
    #####:  730:    return 5;
    #####:  731:  case salvager:
    #####:  732:    return 4;
    #####:  733:  case sea_hag:
    #####:  734:    return 4;
    #####:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
    #####:  742:int smithyEffect(int handPos, struct gameState *state)
        -:  743:{
    #####:  744:  int currentPlayer = whoseTurn(state);
        -:  745:  int i;
        -:  746:
        -:  747:  //+3 Cards
    #####:  748:  for (i = 0; i < 3; i++)
        -:  749:  {
    #####:  750:    drawCard(currentPlayer, state);
        -:  751:  }
        -:  752:
        -:  753:  //discard card from hand
    #####:  754:  discardCard(handPos--, currentPlayer, state, 0);
    #####:  755:  return 0;
        -:  756:}
        -:  757:
    #####:  758:int adventurerEffect(struct gameState *state)
        -:  759:{
    #####:  760:  int drawntreasure = 0;
    #####:  761:  int currentPlayer = whoseTurn(state);
        -:  762:  int cardDrawn;
        -:  763:  int temphand[MAX_HAND];
    #####:  764:  int z = 0;
        -:  765:
    #####:  766:  while (drawntreasure < 2)
        -:  767:  {
    #####:  768:    if (state->deckCount[currentPlayer] < 1)
        -:  769:    { //if the deck is empty we need to shuffle discard and add to deck
    #####:  770:      shuffle(currentPlayer, state);
        -:  771:    }
    #####:  772:    drawCard(currentPlayer, state);
    #####:  773:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####:  774:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  775:      drawntreasure++;
        -:  776:    else
        -:  777:    {
    #####:  778:      temphand[z] = cardDrawn;
    #####:  779:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  780:      z++;
        -:  781:    }
        -:  782:  }
    #####:  783:  while (z - 1 >= 0)
        -:  784:  {
    #####:  785:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  786:    z = z - 1;
        -:  787:  }
    #####:  788:  return 0;
        -:  789:}
        -:  790:
    #####:  791:int villageEffect(int handPos, struct gameState *state)
        -:  792:{
    #####:  793:  int currentPlayer = whoseTurn(state);
        -:  794:
        -:  795:  //+1 Card
    #####:  796:  drawCard(currentPlayer, state);
        -:  797:
        -:  798:  //+2 Actions
    #####:  799:  state->numActions = state->numActions + 2;
        -:  800:
        -:  801:  //discard played card from hand
    #####:  802:  discardCard(handPos, currentPlayer, state, 0);
    #####:  803:  return 0;
        -:  804:}
        -:  805:
    #####:  806:int greathallEffect(int handPos, struct gameState *state)
        -:  807:{
    #####:  808:  int currentPlayer = whoseTurn(state);
        -:  809:  //printf("prev state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
        -:  810:  //+1 Card
    #####:  811:  drawCard(currentPlayer, state);
        -:  812:
        -:  813:  //+1 Actions
    #####:  814:  state->numActions++;
        -:  815:
        -:  816:  //discard card from hand
    #####:  817:  discardCard(handPos, currentPlayer, state, 0);
        -:  818:  // printf("post state greathall action: %d, hand count %d\n", state->numActions, state->handCount[currentPlayer]);
    #####:  819:  return 0;
        -:  820:}
        -:  821:
    #####:  822:int councilroomEffect(int handPos, struct gameState *state)
        -:  823:{
        -:  824:  int i;
    #####:  825:  int currentPlayer = whoseTurn(state);
        -:  826:  //+4 Cards
    #####:  827:  for (i = 0; i < 4; i++)
        -:  828:  {
    #####:  829:    drawCard(currentPlayer, state);
        -:  830:  }
        -:  831:
        -:  832:  //+1 Buy
    #####:  833:  state->numBuys++;
        -:  834:
        -:  835:  //Each other player draws a card
    #####:  836:  for (i = 0; i < state->numPlayers; i++)
        -:  837:  {
    #####:  838:    if (i != currentPlayer)
        -:  839:    {
    #####:  840:      drawCard(i, state);
        -:  841:    }
        -:  842:  }
        -:  843:
        -:  844:  //put played card in played card pile
    #####:  845:  discardCard(handPos, currentPlayer, state, 0);
        -:  846:
    #####:  847:  return 0;
        -:  848:}
        -:  849:
        4:  850:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  851:{
        -:  852:  int i;
        -:  853:  int j;
        -:  854:  int k;
        -:  855:  int x;
        -:  856:  int index;
        4:  857:  int currentPlayer = whoseTurn(state);
        4:  858:  int nextPlayer = currentPlayer + 1;
        -:  859:
        4:  860:  int tributeRevealedCards[2] = {-1, -1};
        -:  861:  int temphand[MAX_HAND]; // moved above the if statement
        4:  862:  int drawntreasure = 0;
        -:  863:  int cardDrawn;
        4:  864:  int z = 0; // this is the counter for the temp hand
        4:  865:  if (nextPlayer > (state->numPlayers - 1))
        -:  866:  {
    #####:  867:    nextPlayer = 0;
        -:  868:  }
        4:  869:  if (card == great_hall)
        -:  870:  {
    #####:  871:    printf("great_hall\n");
        -:  872:  }
        -:  873:  //uses switch to select card and perform actions
        4:  874:  switch (card)
        -:  875:  {
    #####:  876:  case adventurer:
    #####:  877:    return adventurerEffect(state);
        -:  878:
    #####:  879:  case council_room:
    #####:  880:    return councilroomEffect(handPos, state);
        -:  881:
    #####:  882:  case feast:
        -:  883:    //gain card with cost up to 5
        -:  884:    //Backup hand
    #####:  885:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  886:    {
    #####:  887:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  888:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  889:    }
        -:  890:    //Backup hand
        -:  891:
        -:  892:    //Update Coins for Buy
    #####:  893:    updateCoins(currentPlayer, state, 5);
    #####:  894:    x = 1; //Condition to loop on
    #####:  895:    while (x == 1)
        -:  896:    { //Buy one card
    #####:  897:      if (supplyCount(choice1, state) <= 0)
        -:  898:      {
        -:  899:        if (DEBUG)
        -:  900:          printf("None of that card left, sorry!\n");
        -:  901:
        -:  902:        if (DEBUG)
        -:  903:        {
        -:  904:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  905:        }
        -:  906:      }
    #####:  907:      else if (state->coins < getCost(choice1))
        -:  908:      {
    #####:  909:        printf("That card is too expensive!\n");
        -:  910:
        -:  911:        if (DEBUG)
        -:  912:        {
        -:  913:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  914:        }
        -:  915:      }
        -:  916:      else
        -:  917:      {
        -:  918:
        -:  919:        if (DEBUG)
        -:  920:        {
        -:  921:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  922:        }
        -:  923:
    #####:  924:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  925:        x = 0;                                      //No more buying cards
        -:  926:
        -:  927:        if (DEBUG)
        -:  928:        {
        -:  929:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  930:        }
        -:  931:      }
        -:  932:    }
        -:  933:
        -:  934:    //Reset Hand
    #####:  935:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  936:    {
    #####:  937:      state->hand[currentPlayer][i] = temphand[i];
    #####:  938:      temphand[i] = -1;
        -:  939:    }
        -:  940:    //Reset Hand
        -:  941:
    #####:  942:    return 0;
        -:  943:
    #####:  944:  case gardens:
    #####:  945:    return -1;
        -:  946:
        4:  947:  case mine:
        4:  948:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  949:
        4:  950:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  951:    {
        2:  952:      return -1;
        -:  953:    }
        -:  954:
        2:  955:    if (choice2 > treasure_map || choice2 < curse)
        -:  956:    {
    #####:  957:      return -1;
        -:  958:    }
        -:  959:
        2:  960:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  961:    {
        1:  962:      return -1;
        -:  963:    }
        -:  964:
        1:  965:    gainCard(choice2, state, 2, currentPlayer);
        -:  966:
        -:  967:    //discard card from hand
        1:  968:    discardCard(handPos, currentPlayer, state, 0);
        -:  969:
        -:  970:    //discard trashed card
        5:  971:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  972:    {
        5:  973:      if (state->hand[currentPlayer][i] == j)
        -:  974:      {
        1:  975:        discardCard(i, currentPlayer, state, 0);
        1:  976:        break;
        -:  977:      }
        -:  978:    }
        -:  979:
        1:  980:    return 0;
        -:  981:
    #####:  982:  case remodel:
    #####:  983:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  984:
    #####:  985:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  986:    {
    #####:  987:      return -1;
        -:  988:    }
        -:  989:
    #####:  990:    gainCard(choice2, state, 0, currentPlayer);
        -:  991:
        -:  992:    //discard card from hand
    #####:  993:    discardCard(handPos, currentPlayer, state, 0);
        -:  994:
        -:  995:    //discard trashed card
    #####:  996:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  997:    {
    #####:  998:      if (state->hand[currentPlayer][i] == j)
        -:  999:      {
    #####: 1000:        discardCard(i, currentPlayer, state, 0);
    #####: 1001:        break;
        -: 1002:      }
        -: 1003:    }
        -: 1004:
    #####: 1005:    return 0;
        -: 1006:
    #####: 1007:  case smithy:
    #####: 1008:    return smithyEffect(handPos, state);
        -: 1009:
    #####: 1010:  case village:
    #####: 1011:    return villageEffect(handPos, state);
        -: 1012:
    #####: 1013:  case baron:
    #####: 1014:    state->numBuys++; //Increase buys by 1!
    #####: 1015:    if (choice1 > 0)
        -: 1016:    {                             //Boolean true or going to discard an estate
    #####: 1017:      int p = 0;                  //Iterator for hand!
    #####: 1018:      int card_not_discarded = 1; //Flag for discard set!
    #####: 1019:      while (card_not_discarded)
        -: 1020:      {
    #####: 1021:        if (state->hand[currentPlayer][p] == estate)
        -: 1022:        {                    //Found an estate card!
    #####: 1023:          state->coins += 4; //Add 4 coins to the amount of coins
    #####: 1024:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1025:          state->discardCount[currentPlayer]++;
    #####: 1026:          for (; p < state->handCount[currentPlayer]; p++)
        -: 1027:          {
    #####: 1028:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -: 1029:          }
    #####: 1030:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1031:          state->handCount[currentPlayer]--;
    #####: 1032:          card_not_discarded = 0; //Exit the loop
        -: 1033:        }
    #####: 1034:        else if (p > state->handCount[currentPlayer])
        -: 1035:        {
        -: 1036:          if (DEBUG)
        -: 1037:          {
        -: 1038:            printf("No estate cards in your hand, invalid choice\n");
        -: 1039:            printf("Must gain an estate if there are any\n");
        -: 1040:          }
    #####: 1041:          if (supplyCount(estate, state) > 0)
        -: 1042:          {
    #####: 1043:            gainCard(estate, state, 0, currentPlayer);
    #####: 1044:            state->supplyCount[estate]--; //Decrement estates
    #####: 1045:            if (supplyCount(estate, state) == 0)
        -: 1046:            {
    #####: 1047:              isGameOver(state);
        -: 1048:            }
        -: 1049:          }
    #####: 1050:          card_not_discarded = 0; //Exit the loop
        -: 1051:        }
        -: 1052:
        -: 1053:        else
        -: 1054:        {
    #####: 1055:          p++; //Next card
        -: 1056:        }
        -: 1057:      }
        -: 1058:    }
        -: 1059:
        -: 1060:    else
        -: 1061:    {
    #####: 1062:      if (supplyCount(estate, state) > 0)
        -: 1063:      {
    #####: 1064:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1065:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1066:        if (supplyCount(estate, state) == 0)
        -: 1067:        {
    #####: 1068:          isGameOver(state);
        -: 1069:        }
        -: 1070:      }
        -: 1071:    }
        -: 1072:
    #####: 1073:    return 0;
        -: 1074:
    #####: 1075:  case great_hall:
    #####: 1076:    return greathallEffect(handPos, state);
        -: 1077:
    #####: 1078:  case minion:
        -: 1079:    //+1 action
    #####: 1080:    state->numActions++;
        -: 1081:
        -: 1082:    //discard card from hand
    #####: 1083:    discardCard(handPos, currentPlayer, state, 0);
        -: 1084:
    #####: 1085:    if (choice1) //+2 coins
        -: 1086:    {
    #####: 1087:      state->coins = state->coins + 2;
        -: 1088:    }
        -: 1089:
    #####: 1090:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1091:    {
        -: 1092:      //discard hand
    #####: 1093:      while (numHandCards(state) > 0)
        -: 1094:      {
    #####: 1095:        discardCard(handPos, currentPlayer, state, 0);
        -: 1096:      }
        -: 1097:
        -: 1098:      //draw 4
    #####: 1099:      for (i = 0; i < 4; i++)
        -: 1100:      {
    #####: 1101:        drawCard(currentPlayer, state);
        -: 1102:      }
        -: 1103:
        -: 1104:      //other players discard hand and redraw if hand size > 4
    #####: 1105:      for (i = 0; i < state->numPlayers; i++)
        -: 1106:      {
    #####: 1107:        if (i != currentPlayer)
        -: 1108:        {
    #####: 1109:          if (state->handCount[i] > 4)
        -: 1110:          {
        -: 1111:            //discard hand
    #####: 1112:            while (state->handCount[i] > 0)
        -: 1113:            {
    #####: 1114:              discardCard(handPos, i, state, 0);
        -: 1115:            }
        -: 1116:
        -: 1117:            //draw 4
    #####: 1118:            for (j = 0; j < 4; j++)
        -: 1119:            {
    #####: 1120:              drawCard(i, state);
        -: 1121:            }
        -: 1122:          }
        -: 1123:        }
        -: 1124:      }
        -: 1125:    }
    #####: 1126:    return 0;
        -: 1127:
    #####: 1128:  case steward:
    #####: 1129:    if (choice1 == 1)
        -: 1130:    {
        -: 1131:      //+2 cards
    #####: 1132:      drawCard(currentPlayer, state);
    #####: 1133:      drawCard(currentPlayer, state);
        -: 1134:    }
    #####: 1135:    else if (choice1 == 2)
        -: 1136:    {
        -: 1137:      //+2 coins
    #####: 1138:      state->coins = state->coins + 2;
        -: 1139:    }
        -: 1140:    else
        -: 1141:    {
        -: 1142:      //trash 2 cards in hand
    #####: 1143:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:      discardCard(choice3, currentPlayer, state, 1);
        -: 1145:    }
        -: 1146:
        -: 1147:    //discard card from hand
    #####: 1148:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:    return 0;
        -: 1150:
    #####: 1151:  case tribute:
    #####: 1152:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1153:    {
    #####: 1154:      if (state->deckCount[nextPlayer] > 0)
        -: 1155:      {
    #####: 1156:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1157:        state->deckCount[nextPlayer]--;
        -: 1158:      }
    #####: 1159:      else if (state->discardCount[nextPlayer] > 0)
        -: 1160:      {
    #####: 1161:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1162:        state->discardCount[nextPlayer]--;
        -: 1163:      }
        -: 1164:      else
        -: 1165:      {
        -: 1166:        //No Card to Reveal
        -: 1167:        if (DEBUG)
        -: 1168:        {
        -: 1169:          printf("No cards to reveal\n");
        -: 1170:        }
        -: 1171:      }
        -: 1172:    }
        -: 1173:
        -: 1174:    else
        -: 1175:    {
    #####: 1176:      if (state->deckCount[nextPlayer] == 0)
        -: 1177:      {
    #####: 1178:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1179:        {
    #####: 1180:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1181:          state->deckCount[nextPlayer]++;
    #####: 1182:          state->discard[nextPlayer][i] = -1;
    #####: 1183:          state->discardCount[nextPlayer]--;
        -: 1184:        }
        -: 1185:
    #####: 1186:        shuffle(nextPlayer, state); //Shuffle the deck
        -: 1187:      }
    #####: 1188:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1189:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1190:      state->deckCount[nextPlayer]--;
    #####: 1191:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1192:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1193:      state->deckCount[nextPlayer]--;
        -: 1194:    }
        -: 1195:
    #####: 1196:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1197:    { //If we have a duplicate card, just drop one
    #####: 1198:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1199:      state->playedCardCount++;
    #####: 1200:      tributeRevealedCards[1] = -1;
        -: 1201:    }
        -: 1202:
    #####: 1203:    for (i = 0; i <= 2; i++)
        -: 1204:    {
    #####: 1205:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1206:      { //Treasure cards
    #####: 1207:        state->coins += 2;
        -: 1208:      }
        -: 1209:
    #####: 1210:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1211:      { //Victory Card Found
    #####: 1212:        drawCard(currentPlayer, state);
    #####: 1213:        drawCard(currentPlayer, state);
        -: 1214:      }
        -: 1215:      else
        -: 1216:      { //Action Card
    #####: 1217:        state->numActions = state->numActions + 2;
        -: 1218:      }
        -: 1219:    }
        -: 1220:
    #####: 1221:    return 0;
        -: 1222:
    #####: 1223:  case ambassador:
    #####: 1224:    j = 0; //used to check if player has enough cards to discard
        -: 1225:
    #####: 1226:    if (choice2 > 2 || choice2 < 0)
        -: 1227:    {
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:
    #####: 1231:    if (choice1 == handPos)
        -: 1232:    {
    #####: 1233:      return -1;
        -: 1234:    }
        -: 1235:
    #####: 1236:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1237:    {
    #####: 1238:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1239:      {
    #####: 1240:        j++;
        -: 1241:      }
        -: 1242:    }
    #####: 1243:    if (j < choice2)
        -: 1244:    {
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:
        -: 1248:    if (DEBUG)
        -: 1249:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1250:
        -: 1251:    //increase supply count for choosen card by amount being discarded
    #####: 1252:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1253:
        -: 1254:    //each other player gains a copy of revealed card
    #####: 1255:    for (i = 0; i < state->numPlayers; i++)
        -: 1256:    {
    #####: 1257:      if (i != currentPlayer)
        -: 1258:      {
    #####: 1259:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1260:      }
        -: 1261:    }
        -: 1262:
        -: 1263:    //discard played card from hand
    #####: 1264:    discardCard(handPos, currentPlayer, state, 0);
        -: 1265:
        -: 1266:    //trash copies of cards returned to supply
    #####: 1267:    for (j = 0; j < choice2; j++)
        -: 1268:    {
    #####: 1269:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1270:      {
    #####: 1271:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1272:        {
    #####: 1273:          discardCard(i, currentPlayer, state, 1);
    #####: 1274:          break;
        -: 1275:        }
        -: 1276:      }
        -: 1277:    }
        -: 1278:
    #####: 1279:    return 0;
        -: 1280:
    #####: 1281:  case cutpurse:
        -: 1282:
    #####: 1283:    updateCoins(currentPlayer, state, 2);
    #####: 1284:    for (i = 0; i < state->numPlayers; i++)
        -: 1285:    {
    #####: 1286:      if (i != currentPlayer)
        -: 1287:      {
    #####: 1288:        for (j = 0; j < state->handCount[i]; j++)
        -: 1289:        {
    #####: 1290:          if (state->hand[i][j] == copper)
        -: 1291:          {
    #####: 1292:            discardCard(j, i, state, 0);
    #####: 1293:            break;
        -: 1294:          }
    #####: 1295:          if (j == state->handCount[i])
        -: 1296:          {
    #####: 1297:            for (k = 0; k < state->handCount[i]; k++)
        -: 1298:            {
        -: 1299:              if (DEBUG)
        -: 1300:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1301:            }
    #####: 1302:            break;
        -: 1303:          }
        -: 1304:        }
        -: 1305:      }
        -: 1306:    }
        -: 1307:
        -: 1308:    //discard played card from hand
    #####: 1309:    discardCard(handPos, currentPlayer, state, 0);
        -: 1310:
    #####: 1311:    return 0;
        -: 1312:
    #####: 1313:  case embargo:
        -: 1314:    //+2 Coins
    #####: 1315:    state->coins = state->coins + 2;
        -: 1316:
        -: 1317:    //see if selected pile is in play
    #####: 1318:    if (state->supplyCount[choice1] == -1)
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:    //add embargo token to selected supply pile
    #####: 1324:    state->embargoTokens[choice1]++;
        -: 1325:
        -: 1326:    //trash card
    #####: 1327:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1328:    return 0;
        -: 1329:
    #####: 1330:  case outpost:
        -: 1331:    //set outpost flag
    #####: 1332:    state->outpostPlayed++;
        -: 1333:
        -: 1334:    //discard card
    #####: 1335:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1336:    return 0;
        -: 1337:
    #####: 1338:  case salvager:
        -: 1339:    //+1 buy
    #####: 1340:    state->numBuys++;
        -: 1341:
    #####: 1342:    if (choice1)
        -: 1343:    {
        -: 1344:      //gain coins equal to trashed card
    #####: 1345:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1346:      //trash card
    #####: 1347:      discardCard(choice1, currentPlayer, state, 1);
        -: 1348:    }
        -: 1349:
        -: 1350:    //discard card
    #####: 1351:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1352:    return 0;
        -: 1353:
    #####: 1354:  case sea_hag:
    #####: 1355:    for (i = 0; i < state->numPlayers; i++)
        -: 1356:    {
    #####: 1357:      if (i != currentPlayer)
        -: 1358:      {
    #####: 1359:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1360:        state->deckCount[i]--;
    #####: 1361:        state->discardCount[i]++;
    #####: 1362:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1363:      }
        -: 1364:    }
    #####: 1365:    return 0;
        -: 1366:
    #####: 1367:  case treasure_map:
        -: 1368:    //search hand for another treasure_map
    #####: 1369:    index = -1;
    #####: 1370:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1371:    {
    #####: 1372:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1373:      {
    #####: 1374:        index = i;
    #####: 1375:        break;
        -: 1376:      }
        -: 1377:    }
    #####: 1378:    if (index > -1)
        -: 1379:    {
        -: 1380:      //trash both treasure cards
    #####: 1381:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1382:      discardCard(index, currentPlayer, state, 1);
        -: 1383:
        -: 1384:      //gain 4 Gold cards
    #####: 1385:      for (i = 0; i < 4; i++)
        -: 1386:      {
    #####: 1387:        gainCard(gold, state, 1, currentPlayer);
        -: 1388:      }
        -: 1389:
        -: 1390:      //return success
    #####: 1391:      return 1;
        -: 1392:    }
        -: 1393:
        -: 1394:    //no second treasure_map found in hand
    #####: 1395:    return -1;
        -: 1396:  }
        -: 1397:
    #####: 1398:  return -1;
        -: 1399:}
        -: 1400:
        2: 1401:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1402:{
        -: 1403:
        -: 1404:  //if card is not trashed, added to Played pile
        2: 1405:  if (trashFlag < 1)
        -: 1406:  {
        -: 1407:    //add card to played pile
        2: 1408:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        2: 1409:    state->playedCardCount++;
        -: 1410:  }
        -: 1411:
        -: 1412:  //set played card to -1
        2: 1413:  state->hand[currentPlayer][handPos] = -1;
        -: 1414:
        -: 1415:  //remove card from player's hand
        2: 1416:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1417:  {
        -: 1418:    //reduce number of cards in hand
        1: 1419:    state->handCount[currentPlayer]--;
        -: 1420:  }
        1: 1421:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1422:  {
        -: 1423:    //reduce number of cards in hand
    #####: 1424:    state->handCount[currentPlayer]--;
        -: 1425:  }
        -: 1426:  else
        -: 1427:  {
        -: 1428:    //replace discarded card with last card in hand
        1: 1429:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1430:    //set last card to -1
        1: 1431:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1432:    //reduce number of cards in hand
        1: 1433:    state->handCount[currentPlayer]--;
        -: 1434:  }
        -: 1435:
        2: 1436:  return 0;
        -: 1437:}
        -: 1438:
        1: 1439:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1440:{
        -: 1441:  //Note: supplyPos is enum of choosen card
        -: 1442:
        -: 1443:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1444:  if (supplyCount(supplyPos, state) < 1)
        -: 1445:  {
    #####: 1446:    return -1;
        -: 1447:  }
        -: 1448:
        -: 1449:  //added card for [whoseTurn] current player:
        -: 1450:  // toFlag = 0 : add to discard
        -: 1451:  // toFlag = 1 : add to deck
        -: 1452:  // toFlag = 2 : add to hand
        -: 1453:
        1: 1454:  if (toFlag == 1)
        -: 1455:  {
    #####: 1456:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1457:    state->deckCount[player]++;
        -: 1458:  }
        1: 1459:  else if (toFlag == 2)
        -: 1460:  {
        1: 1461:    state->hand[player][state->handCount[player]] = supplyPos;
        1: 1462:    state->handCount[player]++;
        -: 1463:  }
        -: 1464:  else
        -: 1465:  {
    #####: 1466:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1467:    state->discardCount[player]++;
        -: 1468:  }
        -: 1469:
        -: 1470:  //decrease number in supply pile
        1: 1471:  state->supplyCount[supplyPos]--;
        -: 1472:
        1: 1473:  return 0;
        -: 1474:}
        -: 1475:
        1: 1476:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1477:{
        -: 1478:  int i;
        -: 1479:
        -: 1480:  //reset coin count
        1: 1481:  state->coins = 0;
        -: 1482:
        -: 1483:  //add coins for each Treasure card in player's hand
        6: 1484:  for (i = 0; i < state->handCount[player]; i++)
        -: 1485:  {
        5: 1486:    if (state->hand[player][i] == copper)
        -: 1487:    {
        4: 1488:      state->coins += 1;
        -: 1489:    }
        1: 1490:    else if (state->hand[player][i] == silver)
        -: 1491:    {
    #####: 1492:      state->coins += 2;
        -: 1493:    }
        1: 1494:    else if (state->hand[player][i] == gold)
        -: 1495:    {
    #####: 1496:      state->coins += 3;
        -: 1497:    }
        -: 1498:  }
        -: 1499:
        -: 1500:  //add bonus
        1: 1501:  state->coins += bonus;
        -: 1502:
        1: 1503:  return 0;
        -: 1504:}
        -: 1505:
        -: 1506://end of dominion.c
